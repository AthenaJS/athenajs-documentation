[
  {
    "comment": "/**\n * Object that allows sending & receving binary data using HTTP\n */",
    "meta": {
      "range": [
        114,
        1190
      ],
      "filename": "Binary.js",
      "lineno": 6,
      "columnno": 6,
      "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
      "code": {
        "id": "astnode100000007",
        "name": "Binary",
        "type": "ObjectExpression",
        "value": "{\"sendArrayBufferView\":\"\",\"getArrayBuffer\":\"\"}"
      }
    },
    "description": "Object that allows sending & receving binary data using HTTP",
    "name": "Binary",
    "longname": "Binary",
    "kind": "constant",
    "scope": "global",
    "params": [],
    "$longname": "Binary",
    "$members": [
      {
        "comment": "/**\n     * Retrieves binary data from the server\n     *\n     * @param {String} url Url to get binary data from.\n     * @returns {Promise} promise that is fullfilled with ArrayBuffer or false if get failed\n     */",
        "meta": {
          "range": [
            671,
            1188
          ],
          "filename": "Binary.js",
          "lineno": 27,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000034",
            "name": "getArrayBuffer",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Retrieves binary data from the server",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Url to get binary data from.",
            "name": "url"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "promise that is fullfilled with ArrayBuffer or false if get failed"
          }
        ],
        "name": "getArrayBuffer",
        "longname": "Binary.getArrayBuffer",
        "kind": "function",
        "memberof": "Binary",
        "scope": "static",
        "$longname": "Binary.getArrayBuffer"
      },
      {
        "comment": "/**\n     * Sends binary as POST\n     *\n     * @param {ArrayBufferView} view Binary data to send.\n     * @param {String} url Url to post binary data to.\n     */",
        "meta": {
          "range": [
            293,
            447
          ],
          "filename": "Binary.js",
          "lineno": 13,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000010",
            "name": "sendArrayBufferView",
            "type": "FunctionExpression"
          },
          "vars": {
            "req": "Binary.sendArrayBufferView~req"
          }
        },
        "description": "Sends binary as POST",
        "params": [
          {
            "type": {
              "names": [
                "ArrayBufferView"
              ]
            },
            "description": "Binary data to send.",
            "name": "view"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Url to post binary data to.",
            "name": "url"
          }
        ],
        "name": "sendArrayBufferView",
        "longname": "Binary.sendArrayBufferView",
        "kind": "function",
        "memberof": "Binary",
        "scope": "static",
        "$longname": "Binary.sendArrayBufferView"
      }
    ]
  },
  {
    "comment": "/**\n * Simple wrapper for ES6 native Promise\n * \n * @example\n * \n * import {Deferred} from 'athenajs';\n * \n * let def = new Deferred(),\n * promise = def.promise;\n * \n * setTimeout(() => {\n *   def.resolve('done');\n * }, 5000);\n * \n * promise.then((res) => {\n *  console.log('message recived', res);\n * });\n * \n */",
    "meta": {
      "range": [
        350,
        808
      ],
      "filename": "Deferred.js",
      "lineno": 22,
      "columnno": 0,
      "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
      "code": {
        "id": "astnode100000103",
        "name": "Deferred",
        "type": "ClassDeclaration",
        "paramnames": []
      }
    },
    "classdesc": "Simple wrapper for ES6 native Promise",
    "examples": [
      "import {Deferred} from 'athenajs';\n\nlet def = new Deferred(),\npromise = def.promise;\n\nsetTimeout(() => {\n  def.resolve('done');\n}, 5000);\n\npromise.then((res) => {\n console.log('message recived', res);\n});"
    ],
    "name": "Deferred",
    "longname": "Deferred",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Deferred.",
    "params": [],
    "$longname": "Deferred",
    "$members": [
      {
        "comment": "/**\n     * Creates and immediately resolves a new deferred.\n     *\n     * @param {any} val the value to resolve the promise with\n     * \n     * \n     */",
        "meta": {
          "range": [
            742,
            806
          ],
          "filename": "Deferred.js",
          "lineno": 40,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000133",
            "name": "Deferred.resolve",
            "type": "MethodDefinition",
            "paramnames": [
              "val"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Creates and immediately resolves a new deferred.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "the value to resolve the promise with",
            "name": "val"
          }
        ],
        "name": "resolve",
        "longname": "Deferred.resolve",
        "kind": "function",
        "memberof": "Deferred",
        "scope": "static",
        "$longname": "Deferred.resolve"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Deferred.\n     */",
      "meta": {
        "range": [
          418,
          579
        ],
        "filename": "Deferred.js",
        "lineno": 26,
        "columnno": 4,
        "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
        "code": {
          "id": "astnode100000106",
          "name": "Deferred",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Deferred.",
      "name": "Deferred",
      "longname": "Deferred",
      "kind": "class",
      "scope": "global",
      "params": [],
      "undocumented": true,
      "$longname": "Deferred"
    }
  },
  {
    "comment": "/**\n * Dom is a very simple jQuery-like object that allows to manipulate\n * a collection of DOM elements.\n *\n * As in jQuery, you may manipulate individual Dom elements using [] operator\n *\n * @param {(HTMLElement|String)} [selector=null] The optional selector to use to create the new Dom collection\n * \n * @class\n * @constructor\n * \n * @example\n * \n * import {Dom} from 'athenajs';\n * \n * // removes the `foo` class to every `.foo` element\n * Dom('.foo').removeClass('foo');\n */",
    "meta": {
      "range": [
        583,
        1099
      ],
      "filename": "Dom.js",
      "lineno": 21,
      "columnno": 0,
      "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
      "code": {
        "id": "astnode100000148",
        "name": "Dom",
        "type": "FunctionDeclaration",
        "paramnames": [
          "selector"
        ]
      }
    },
    "description": "Dom is a very simple jQuery-like object that allows to manipulate\na collection of DOM elements.\n\nAs in jQuery, you may manipulate individual Dom elements using [] operator",
    "params": [
      {
        "type": {
          "names": [
            "HTMLElement",
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The optional selector to use to create the new Dom collection",
        "name": "selector"
      }
    ],
    "kind": "class",
    "classdesc": null,
    "examples": [
      "import {Dom} from 'athenajs';\n\n// removes the `foo` class to every `.foo` element\nDom('.foo').removeClass('foo');"
    ],
    "name": "Dom",
    "longname": "Dom",
    "scope": "global",
    "$longname": "Dom",
    "$members": [
      {
        "comment": "/**\n     * Add one or more CSS classes to a DOM collection\n     *\n     * @param {String} name space-separated list of classes to add\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            4129,
            4315
          ],
          "filename": "Dom.js",
          "lineno": 150,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000445",
            "name": "addClass",
            "type": "FunctionExpression"
          },
          "vars": {
            "classes": "Dom#addClass~classes",
            "": null
          }
        },
        "description": "Add one or more CSS classes to a DOM collection",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "space-separated list of classes to add",
            "name": "name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "addClass",
        "longname": "Dom#addClass",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#addClass"
      },
      {
        "comment": "/**\n     * Append current collection to the element with a specific selector\n     *\n     * @param {String|HTMLElement} selector Target element where to append selected elements.\n     * It can either be a CSS selector or a DOM HTMLElement.\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            2958,
            3246
          ],
          "filename": "Dom.js",
          "lineno": 105,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000355",
            "name": "appendTo",
            "type": "FunctionExpression"
          },
          "vars": {
            "target": "Dom#appendTo~target",
            "": null
          }
        },
        "description": "Append current collection to the element with a specific selector",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "HTMLElement"
              ]
            },
            "description": "Target element where to append selected elements.\nIt can either be a CSS selector or a DOM HTMLElement.",
            "name": "selector"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "appendTo",
        "longname": "Dom#appendTo",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#appendTo"
      },
      {
        "comment": "/**\n     * Change multiple attributes at once\n     *\n     * @param {String|Object} att attribute name to modify or list of attributes+values to change\n     * @param {String} val value of the attribute to set\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            3531,
            3919
          ],
          "filename": "Dom.js",
          "lineno": 126,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000393",
            "name": "attr",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Change multiple attributes at once",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Object"
              ]
            },
            "description": "attribute name to modify or list of attributes+values to change",
            "name": "att"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "value of the attribute to set",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "attr",
        "longname": "Dom#attr",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#attr"
      },
      {
        "comment": "/**\n     * jQuery-like CSS method to easily set multiple styles on a dom collection\n     *\n     * @param {String|Object} prop or list of properties with their new value\n     * @param {String} val value of the property\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            1454,
            2060
          ],
          "filename": "Dom.js",
          "lineno": 51,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000227",
            "name": "css",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "jQuery-like CSS method to easily set multiple styles on a dom collection",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Object"
              ]
            },
            "description": "or list of properties with their new value",
            "name": "prop"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "value of the property",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "css",
        "longname": "Dom#css",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#css"
      },
      {
        "comment": "/**\n     * Returns a new collection with elements matching the selector found inside current collection\n     *\n     * @param {String} selector the selector to match\n     * @returns {Dom} a new Dom collection with found elements\n     * \n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            2337,
            2642
          ],
          "filename": "Dom.js",
          "lineno": 83,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000307",
            "name": "find",
            "type": "FunctionExpression"
          },
          "vars": {
            "newDom": "Dom#find~newDom",
            "": null
          }
        },
        "description": "Returns a new collection with elements matching the selector found inside current collection",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "the selector to match",
            "name": "selector"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "a new Dom collection with found elements"
          }
        ],
        "memberof": "Dom",
        "name": "find",
        "longname": "Dom#find",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#find"
      },
      {
        "comment": "/**\n     * Hides specified set of elements\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            5357,
            5488
          ],
          "filename": "Dom.js",
          "lineno": 210,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000544",
            "name": "hide",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides specified set of elements",
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "hide",
        "longname": "Dom#hide",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#hide"
      },
      {
        "comment": "/**\n     * Changes innerHTML of a collection\n     *\n     * @param {String} html to set as innerHTML\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            4879,
            4985
          ],
          "filename": "Dom.js",
          "lineno": 184,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000505",
            "name": "html",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes innerHTML of a collection",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "to set as innerHTML",
            "name": "html"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "html",
        "longname": "Dom#html",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#html"
      },
      {
        "comment": "/**\n     * Remove one or more CSS classes to a DOM collection\n     *\n     * @param {String} name Space-separated list of classes to remove.\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            4532,
            4702
          ],
          "filename": "Dom.js",
          "lineno": 168,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000476",
            "name": "removeClass",
            "type": "FunctionExpression"
          },
          "vars": {
            "classes": "Dom#removeClass~classes",
            "": null
          }
        },
        "description": "Remove one or more CSS classes to a DOM collection",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Space-separated list of classes to remove.",
            "name": "name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "removeClass",
        "longname": "Dom#removeClass",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#removeClass"
      },
      {
        "comment": "/**\n     * Shows specified set of elements\n     * @returns {Dom} `this`\n     *\n     * @memberof Dom#\n     */",
        "meta": {
          "range": [
            5105,
            5237
          ],
          "filename": "Dom.js",
          "lineno": 196,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000523",
            "name": "show",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Shows specified set of elements",
        "returns": [
          {
            "type": {
              "names": [
                "Dom"
              ]
            },
            "description": "`this`"
          }
        ],
        "memberof": "Dom",
        "name": "show",
        "longname": "Dom#show",
        "kind": "function",
        "scope": "instance",
        "$longname": "Dom#show"
      }
    ]
  },
  {
    "comment": "/**\n * Pool support for AthenaJS\n *\n * With a Pool objects are defined ahead of time, and any free instance\n * from the pool is used when you want to use a new object.\n */",
    "meta": {
      "range": [
        178,
        2422
      ],
      "filename": "Pool.js",
      "lineno": 7,
      "columnno": 6,
      "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
      "code": {
        "id": "astnode100000570",
        "name": "Pool",
        "type": "ObjectExpression",
        "value": "{\"create\":\"\"}"
      }
    },
    "description": "Pool support for AthenaJS\n\nWith a Pool objects are defined ahead of time, and any free instance\nfrom the pool is used when you want to use a new object.",
    "name": "Pool",
    "longname": "Pool",
    "kind": "constant",
    "scope": "global",
    "params": [],
    "$longname": "Pool",
    "$members": [
      {
        "comment": "/**\n     * Creates a new pool\n     *\n     * @param {Function} obj the constructor of the object to add a pool for\n     * @param {Number} size the size of the pool\n     */",
        "meta": {
          "range": [
            366,
            2420
          ],
          "filename": "Pool.js",
          "lineno": 14,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Util",
          "code": {
            "id": "astnode100000573",
            "name": "create",
            "type": "FunctionExpression"
          },
          "vars": {
            "obj._pool": "obj._pool",
            "obj._poolMarker": "obj._poolMarker",
            "obj._poolSize": "obj._poolSize",
            "pool": "Pool.create~pool",
            "obj.createFromPool": "obj.createFromPool",
            "": null,
            "obj.expandPool": "obj.expandPool",
            "obj.prototype.freeFromPool": "obj#freeFromPool"
          }
        },
        "description": "Creates a new pool",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "the constructor of the object to add a pool for",
            "name": "obj"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the size of the pool",
            "name": "size"
          }
        ],
        "name": "create",
        "longname": "Pool.create",
        "kind": "function",
        "memberof": "Pool",
        "scope": "static",
        "$longname": "Pool.create"
      }
    ]
  }
]