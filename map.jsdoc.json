[
  {
    "comment": "/**\n * The `Map` is used to display tile-based backgrounds. It is usually initialized using a buffer containing\n * tiles and tilebehaviors.\n * \n * It has a viewport so that only a part of the map can be displayed.\n * \n * A map also contains objects that are added onto the map once the viewport reaches a `block`.\n *\n */",
    "meta": {
      "range": [
        531,
        59279
      ],
      "filename": "Map.js",
      "lineno": 19,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
      "code": {
        "id": "astnode100000028",
        "name": "Map",
        "type": "ClassDeclaration",
        "paramnames": [
          "options"
        ]
      }
    },
    "classdesc": "The `Map` is used to display tile-based backgrounds. It is usually initialized using a buffer containing\ntiles and tilebehaviors.\n\nIt has a viewport so that only a part of the map can be displayed.\n\nA map also contains objects that are added onto the map once the viewport reaches a `block`.",
    "name": "Map",
    "longname": "Map",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Map",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The url to an image that will be used for the tiles",
        "name": "options.src"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The width of a tile",
        "name": "options.tileWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The height of a tile",
        "name": "options.tileHeight"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The full width of the map",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The full height of the map",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The width of the viewport: it is usually the same as the game width. Default = map.width",
        "name": "options.viewportW"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The height of the viewport: it is usually the same as the game height. Default = map.height",
        "name": "options.viewportH"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Initial x viewport (horizontal scrolling position) of the map.",
        "name": "options.viewportX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Initial y viewport (vertical scrolling position) of the map.",
        "name": "options.viewportY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "An optionnal array with the tiles to use for the map.",
        "name": "options.tiles"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "'map'",
        "description": "An optional name for the map.",
        "name": "options.name"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "'linear'",
        "description": "The linear function to use when scrolling the map. Defaults to linear.",
        "name": "options.easing"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The start x position of the master object.",
        "name": "options.startX"
      },
      {
        "type": {
          "names": [
            "Sumber"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The start y position of the master object.",
        "name": "options.startY"
      },
      {
        "type": {
          "names": [
            "ArrayBuffer"
          ]
        },
        "description": "The buffer containing width \\* height bytes container tile numbers followed by width*height bytes for the tile behaviors",
        "name": "options.buffer"
      }
    ],
    "$longname": "Map",
    "$members": [
      {
        "comment": "/**\n\t * Add a new graphical object on to the map, it will be:\n\t *  - displayed if it is visible (in the viewport)\n\t *  - added to collision group\n\t *\n\t * @param {Drawable} obj A reference to the new object to add.\n     * @param {Number} [layerIndex=0] The layer to add the object into.\n\t *\n\t * @note the object will be added to the correct collision group\n\t * if obj.collideGroup is set\n\t *\n\t */",
        "meta": {
          "range": [
            11431,
            12570
          ],
          "filename": "Map.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000995",
            "name": "Map#addObject",
            "type": "MethodDefinition",
            "paramnames": [
              "obj",
              "layerIndex"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new graphical object on to the map, it will be:\n - displayed if it is visible (in the viewport)\n - added to collision group",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "A reference to the new object to add.",
            "name": "obj"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The layer to add the object into.",
            "name": "layerIndex"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "the object will be added to the correct collision group\nif obj.collideGroup is set",
            "value": "the object will be added to the correct collision group\nif obj.collideGroup is set"
          }
        ],
        "name": "addObject",
        "longname": "Map#addObject",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#addObject"
      },
      {
        "comment": "/**\n     * adds a new tileset for the map\n     *\n     * @param {Array} [tiles=[]] The tile descriptions.\n     *\n     */",
        "meta": {
          "range": [
            51953,
            52200
          ],
          "filename": "Map.js",
          "lineno": 1571,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004643",
            "name": "Map#addTileSet",
            "type": "MethodDefinition",
            "paramnames": [
              "tiles"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "adds a new tileset for the map",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "optional": true,
            "defaultvalue": "[]",
            "description": "The tile descriptions.",
            "name": "tiles"
          }
        ],
        "name": "addTileSet",
        "longname": "Map#addTileSet",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#addTileSet"
      },
      {
        "comment": "/**\n\t *\n\t * Check for collisions\n\t *\n\t */",
        "meta": {
          "range": [
            18551,
            18757
          ],
          "filename": "Map.js",
          "lineno": 564,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001593",
            "name": "Map#checkCollisions",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Check for collisions",
        "name": "checkCollisions",
        "longname": "Map#checkCollisions",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#checkCollisions"
      },
      {
        "comment": "/**\n     * Checks if an object is in front of a certain type of tileType,\n     * optionnaly centering the object under the tile\n     *\n     * Used when checking if the player can climb a ladder for example\n     *\n     * spaceX/spaceY specify how to reduce the players hitbox\n     *\n     * @param {Drawable} sprite The sprite to check.\n     * @param {Number} tileType The tileType to check for.\n     * @param {Number} [spaceX=0] The x padding that is accepted: if horizontal position is +/- that spaceX, check will succeed.\n     * @param {Number} [spaceY=0] The y padding that is accepted: if vertical position is +/- that spaceX, check will succeed.\n     * @param {Boolean} [center=false] Set to true if you want to sprite to be centered on the tile.\n     *\n     * @returns {Boolean} True if the tile was found, false otherwise\n     *\n     */",
        "meta": {
          "range": [
            32811,
            33371
          ],
          "filename": "Map.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002771",
            "name": "Map#checkForTileType",
            "type": "MethodDefinition",
            "paramnames": [
              "sprite",
              "tileType",
              "spaceX",
              "spaceY",
              "center"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks if an object is in front of a certain type of tileType,\noptionnaly centering the object under the tile\n\nUsed when checking if the player can climb a ladder for example\n\nspaceX/spaceY specify how to reduce the players hitbox",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The sprite to check.",
            "name": "sprite"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The tileType to check for.",
            "name": "tileType"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The x padding that is accepted: if horizontal position is +/- that spaceX, check will succeed.",
            "name": "spaceX"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The y padding that is accepted: if vertical position is +/- that spaceX, check will succeed.",
            "name": "spaceY"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true if you want to sprite to be centered on the tile.",
            "name": "center"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "True if the tile was found, false otherwise"
          }
        ],
        "name": "checkForTileType",
        "longname": "Map#checkForTileType",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#checkForTileType"
      },
      {
        "comment": "/**\n\t *\n\t * Check for map triggers and handle any found triggers, like enemies or bonus that can appear\n\t * when the player reaches certain positions\n\t *\n\t */",
        "meta": {
          "range": [
            18927,
            19289
          ],
          "filename": "Map.js",
          "lineno": 579,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001618",
            "name": "Map#checkForTriggers",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Check for map triggers and handle any found triggers, like enemies or bonus that can appear\nwhen the player reaches certain positions",
        "name": "checkForTriggers",
        "longname": "Map#checkForTriggers",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#checkForTriggers"
      },
      {
        "comment": "/**\n\t *\n\t * Checks collisions between master bullets and enemies: call hitTest method on\n\t * any frend bullet object with the enemies object as parameter\n\t *\n\t */",
        "meta": {
          "range": [
            21898,
            22388
          ],
          "filename": "Map.js",
          "lineno": 673,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001896",
            "name": "Map#checkMasterBulletsToEnemiesCollisions",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks collisions between master bullets and enemies: call hitTest method on\nany frend bullet object with the enemies object as parameter",
        "name": "checkMasterBulletsToEnemiesCollisions",
        "longname": "Map#checkMasterBulletsToEnemiesCollisions",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#checkMasterBulletsToEnemiesCollisions"
      },
      {
        "comment": "/**\n\t *\n\t * Triggers map scrolling depending on the master's position (if needed)\n\t *\n\t */",
        "meta": {
          "range": [
            16243,
            18498
          ],
          "filename": "Map.js",
          "lineno": 516,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001394",
            "name": "Map#checkMasterPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Triggers map scrolling depending on the master's position (if needed)",
        "name": "checkMasterPosition",
        "longname": "Map#checkMasterPosition",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#checkMasterPosition"
      },
      {
        "comment": "/**\n    * Checks collisions between master object and enemies, calling hitTest on any enemie\n    * that collides with the master\n    *\n    * @returns {Boolean} Returns true if the masterSprite was hit, false otherwise.\n    *\n    */",
        "meta": {
          "range": [
            22631,
            23014
          ],
          "filename": "Map.js",
          "lineno": 696,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001976",
            "name": "Map#checkMasterToEnemiesCollisions",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks collisions between master object and enemies, calling hitTest on any enemie\nthat collides with the master",
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if the masterSprite was hit, false otherwise."
          }
        ],
        "name": "checkMasterToEnemiesCollisions",
        "longname": "Map#checkMasterToEnemiesCollisions",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#checkMasterToEnemiesCollisions"
      },
      {
        "comment": "/**\n     * Compares a source matrix with map behaviors, looking for hits\n     *\n     * @param {Array} buffer the source buffer: 0 === empty, 1 === full\n     * @param {Number} matrixWidth the width of the matrix, in pixels\n     * @param {Number} x the x index to start checking inside the map\n     * @param {Number} y the y index to start checking inside the map\n     * @param {Number} behavior the behavior to check for\n     *\n     * @returns {Boolean} true if one or more hits were found, false otherwise\n     */",
        "meta": {
          "range": [
            25510,
            25968
          ],
          "filename": "Map.js",
          "lineno": 784,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002197",
            "name": "Map#checkMatrixForCollision",
            "type": "MethodDefinition",
            "paramnames": [
              "buffer",
              "matrixWidth",
              "x",
              "y",
              "behavior"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Compares a source matrix with map behaviors, looking for hits",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "the source buffer: 0 === empty, 1 === full",
            "name": "buffer"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the width of the matrix, in pixels",
            "name": "matrixWidth"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the x index to start checking inside the map",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the y index to start checking inside the map",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the behavior to check for",
            "name": "behavior"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "true if one or more hits were found, false otherwise"
          }
        ],
        "name": "checkMatrixForCollision",
        "longname": "Map#checkMatrixForCollision",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#checkMatrixForCollision"
      },
      {
        "comment": "/**\n     * Clears the whole map with specified tile number & behavior\n     *\n     * @param {Number} [tileNum=0] Tile number to use for the whole map.\n     * @param {Number} [behavior=Tile.TYPE.AIR] Behavior number to use for the whole map.\n     */",
        "meta": {
          "range": [
            52458,
            52763
          ],
          "filename": "Map.js",
          "lineno": 1588,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004678",
            "name": "Map#clear",
            "type": "MethodDefinition",
            "paramnames": [
              "tileNum",
              "behavior"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Clears the whole map with specified tile number & behavior",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Tile number to use for the whole map.",
            "name": "tileNum"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": "Tile.TYPE.AIR",
            "description": "Behavior number to use for the whole map.",
            "name": "behavior"
          }
        ],
        "name": "clear",
        "longname": "Map#clear",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#clear"
      },
      {
        "comment": "/**\n\t * Sets current debug status: when set to true outputs more console logs and may also debug visual stuff\n\t * like map tiles and objects onto the map\n\t *\n\t * @param {Boolean} isDebug Set to true to enable debug.\n\t *\n\t */",
        "meta": {
          "range": [
            13563,
            13699
          ],
          "filename": "Map.js",
          "lineno": 427,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001172",
            "name": "Map#debug",
            "type": "MethodDefinition",
            "paramnames": [
              "isDebug"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets current debug status: when set to true outputs more console logs and may also debug visual stuff\nlike map tiles and objects onto the map",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to enable debug.",
            "name": "isDebug"
          }
        ],
        "name": "debug",
        "longname": "Map#debug",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#debug"
      },
      {
        "comment": "/**\n\t * Checks if tile at position x,y is `TYPE.WALL` and returns true if it is a wall, false otherwise\n\t *\n\t * @param {Number} x The x position of the tile to check.\n\t * @param {Number} y The y position of the tile to check.\n\t * @returns {Boolean} Returns true if the tile is a wall, false otherwise.\n\t *\n\t * @related {Tile}\n\t */",
        "meta": {
          "range": [
            21488,
            21724
          ],
          "filename": "Map.js",
          "lineno": 659,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001859",
            "name": "Map#fallTest",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks if tile at position x,y is `TYPE.WALL` and returns true if it is a wall, false otherwise",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The x position of the tile to check.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The y position of the tile to check.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if the tile is a wall, false otherwise."
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Tile}",
            "value": "{Tile}"
          }
        ],
        "name": "fallTest",
        "longname": "Map#fallTest",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#fallTest"
      },
      {
        "comment": "/**\n     * This method returns min(next `Behavior` tile, distance)\n     *\n     * @param {Sprite} sprite The sprite to check distance with.\n     * @param {Number} distance The maximum (x) distance in pixels.\n     * @param {Number} behavior The behavior we want to check for.\n     *\n     * Returns the minimum distance\n     */",
        "meta": {
          "range": [
            26303,
            27293
          ],
          "filename": "Map.js",
          "lineno": 809,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002277",
            "name": "Map#getMaxDistanceToTile",
            "type": "MethodDefinition",
            "paramnames": [
              "sprite",
              "distance",
              "behavior"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "This method returns min(next `Behavior` tile, distance)",
        "params": [
          {
            "type": {
              "names": [
                "Sprite"
              ]
            },
            "description": "The sprite to check distance with.",
            "name": "sprite"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The maximum (x) distance in pixels.",
            "name": "distance"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The behavior we want to check for.\n\nReturns the minimum distance",
            "name": "behavior"
          }
        ],
        "name": "getMaxDistanceToTile",
        "longname": "Map#getMaxDistanceToTile",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#getMaxDistanceToTile"
      },
      {
        "comment": "/**\n\t * Returns the tile at (x, y) pixels\n\t *\n\t * @param {number} x The horizontal position in pixels.\n\t * @param {number} y The vertical position in pixels.\n\t *\n\t * @note Position is related to the whole map, not the viewport.\n\t *\n\t * @returns {(Tile|undefined)} The tile that is found at position x, y, undefined if tile `(x, y)` is out of bounds\n\t *\n\t */",
        "meta": {
          "range": [
            43974,
            44209
          ],
          "filename": "Map.js",
          "lineno": 1288,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100003794",
            "name": "Map#getTileAt",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the tile at (x, y) pixels",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The horizontal position in pixels.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The vertical position in pixels.",
            "name": "y"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "Position is related to the whole map, not the viewport.",
            "value": "Position is related to the whole map, not the viewport."
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Tile",
                "undefined"
              ]
            },
            "description": "The tile that is found at position x, y, undefined if tile `(x, y)` is out of bounds"
          }
        ],
        "name": "getTileAt",
        "longname": "Map#getTileAt",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#getTileAt"
      },
      {
        "comment": "/**\n     * Get the behavior at specified index\n     *\n     * @param {Number} col The col number.\n     * @param {Number} row The row number.\n     *\n     * @returns {Number} The behavior found at position (col, row)\n     */",
        "meta": {
          "range": [
            44441,
            44542
          ],
          "filename": "Map.js",
          "lineno": 1308,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100003847",
            "name": "Map#getTileBehaviorAtIndex",
            "type": "MethodDefinition",
            "paramnames": [
              "col",
              "row"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Get the behavior at specified index",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The col number.",
            "name": "col"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The row number.",
            "name": "row"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The behavior found at position (col, row)"
          }
        ],
        "name": "getTileBehaviorAtIndex",
        "longname": "Map#getTileBehaviorAtIndex",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#getTileBehaviorAtIndex"
      },
      {
        "comment": "/**\n\t * Returns index of the tile at pos (x,y) in map array\n\t *\n\t * @param {number} x Horizontal pixel position.\n\t * @param {number} y Vertical pixel position.\n\t * @returns {Object} Object with i, j tile index\n\t *\n\t */",
        "meta": {
          "range": [
            44771,
            44974
          ],
          "filename": "Map.js",
          "lineno": 1320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100003865",
            "name": "Map#getTileIndexFromPixel",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns index of the tile at pos (x,y) in map array",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal pixel position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical pixel position.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Object with i, j tile index"
          }
        ],
        "name": "getTileIndexFromPixel",
        "longname": "Map#getTileIndexFromPixel",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#getTileIndexFromPixel"
      },
      {
        "comment": "/**\n     * Returns the pixel position of the specified tile\n     *\n     * @param {Number} col Tile column.\n     * @param {Number} row Tile row.\n     * @returns {Object} an object with x & y properties set with tile pixel position\n     */",
        "meta": {
          "range": [
            45222,
            45357
          ],
          "filename": "Map.js",
          "lineno": 1340,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100003902",
            "name": "Map#getTilePixelPos",
            "type": "MethodDefinition",
            "paramnames": [
              "col",
              "row"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the pixel position of the specified tile",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Tile column.",
            "name": "col"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Tile row.",
            "name": "row"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an object with x & y properties set with tile pixel position"
          }
        ],
        "name": "getTilePixelPos",
        "longname": "Map#getTilePixelPos",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#getTilePixelPos"
      },
      {
        "comment": "/**\n     * Tests if a rectangle collapses with certain types of tiles\n     * Used when checking colligions between a sprite and walls for example\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} types\n     * @returns {(Boolean|Object)} True if colision detected\n     *\n     */",
        "meta": {
          "range": [
            33742,
            34578
          ],
          "filename": "Map.js",
          "lineno": 1010,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002853",
            "name": "Map#hitObjectTest",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "x2",
              "y2",
              "types"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Tests if a rectangle collapses with certain types of tiles\nUsed when checking colligions between a sprite and walls for example",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "name": "x2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "name": "y2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "name": "types"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean",
                "Object"
              ]
            },
            "description": "True if colision detected"
          }
        ],
        "name": "hitObjectTest",
        "longname": "Map#hitObjectTest",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#hitObjectTest"
      },
      {
        "comment": "/**\n\t * Move movable objects into the map\n\t *\n     * @param {Number} timestamp current time\n\t */",
        "meta": {
          "range": [
            13806,
            14206
          ],
          "filename": "Map.js",
          "lineno": 438,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001189",
            "name": "Map#moveObjects",
            "type": "MethodDefinition",
            "paramnames": [
              "timestamp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Move movable objects into the map",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "current time",
            "name": "timestamp"
          }
        ],
        "name": "moveObjects",
        "longname": "Map#moveObjects",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#moveObjects"
      },
      {
        "comment": "/**\n\t * Move platform objects onto the map: they must be moved before normal objects are moved\n\t * so that movable objects move related to the platforms\n\t *\n     * @param {Number} timestamp Current time.\n\t */",
        "meta": {
          "range": [
            14425,
            14601
          ],
          "filename": "Map.js",
          "lineno": 456,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001221",
            "name": "Map#movePlatforms",
            "type": "MethodDefinition",
            "paramnames": [
              "timestamp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Move platform objects onto the map: they must be moved before normal objects are moved\nso that movable objects move related to the platforms",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Current time.",
            "name": "timestamp"
          }
        ],
        "name": "movePlatforms",
        "longname": "Map#movePlatforms",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#movePlatforms"
      },
      {
        "comment": "/**\n\t * Sets a new destination for the viewport: this method doesn't not set it immediately\n\t * but sets a new target instead: if not already moving, new move will happen at each\n\t * render inside the map.update) method.\n     *\n     * This method uses current map.duration and map.easing to perform the move.\n\t *\n\t * @param {number} x The horizontal position to move the viewport at.\n\t * @param {number} y The vertical position to move the viewport at.\n\t *\n\t * @note moveTo will do nothing in case the map is already scrolling\n\t */",
        "meta": {
          "range": [
            19832,
            20718
          ],
          "filename": "Map.js",
          "lineno": 601,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001694",
            "name": "Map#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new destination for the viewport: this method doesn't not set it immediately\nbut sets a new target instead: if not already moving, new move will happen at each\nrender inside the map.update) method.\n\nThis method uses current map.duration and map.easing to perform the move.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The horizontal position to move the viewport at.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The vertical position to move the viewport at.",
            "name": "y"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "moveTo will do nothing in case the map is already scrolling",
            "value": "moveTo will do nothing in case the map is already scrolling"
          }
        ],
        "name": "moveTo",
        "longname": "Map#moveTo",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#moveTo"
      },
      {
        "comment": "/**\n\t * Send specified event to the NotificationManager\n\t *\n\t * @param {String} eventType The type of event to send.\n\t * @param {Object} data The data to send with the notification.\n\t *\n\t */",
        "meta": {
          "range": [
            47246,
            47313
          ],
          "filename": "Map.js",
          "lineno": 1406,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004123",
            "name": "Map#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "eventType",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Send specified event to the NotificationManager",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The type of event to send.",
            "name": "eventType"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The data to send with the notification.",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "Map#notify",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#notify"
      },
      {
        "comment": "/**\n\t * removeObject from the map\n\t *\n\t * @param {Drawable} drawable The object to remove from the map.\n\t *\n\t * @note the object if automatically removed from collision lists\n\t *\n\t */",
        "meta": {
          "range": [
            47508,
            47962
          ],
          "filename": "Map.js",
          "lineno": 1419,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004136",
            "name": "Map#removeObject",
            "type": "MethodDefinition",
            "paramnames": [
              "drawable"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "removeObject from the map",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to remove from the map.",
            "name": "drawable"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "the object if automatically removed from collision lists",
            "value": "the object if automatically removed from collision lists"
          }
        ],
        "name": "removeObject",
        "longname": "Map#removeObject",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#removeObject"
      },
      {
        "comment": "/**\n\t *\n\t * Resets the map:\n\t * \t- removes objects from the map\n\t *  - reset windows\n\t *  - reset triggers\n\t *  - reset mapEvents\n\t *  - reset viewport + tileOffset\n\t *  - sets isDirty to true so that map is redrawn\n\t *\n\t * TODO: tileOffset shouldn't be 0 but depends on the master's position\n\t *\n\t */",
        "meta": {
          "range": [
            8057,
            9493
          ],
          "filename": "Map.js",
          "lineno": 234,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000606",
            "name": "Map#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Resets the map:\n\t- removes objects from the map\n - reset windows\n - reset triggers\n - reset mapEvents\n - reset viewport + tileOffset\n - sets isDirty to true so that map is redrawn\n\nTODO: tileOffset shouldn't be 0 but depends on the master's position",
        "name": "reset",
        "longname": "Map#reset",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#reset"
      },
      {
        "comment": "/**\n\t * Resets the master's position to the map.startX/startY position & resets its animation state:\n\t * usually called when player loses a life and needs to be positionned at a checkpoint\n\t *\n\t */",
        "meta": {
          "range": [
            7332,
            7744
          ],
          "filename": "Map.js",
          "lineno": 208,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000525",
            "name": "Map#respawn",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Resets the master's position to the map.startX/startY position & resets its animation state:\nusually called when player loses a life and needs to be positionned at a checkpoint",
        "name": "respawn",
        "longname": "Map#respawn",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#respawn"
      },
      {
        "comment": "/**\n\t * Sets the map tiles and tiletypes from binary buffer:\n\t *  - first (numCols * numRows) bytes are visual tile numbers\n\t *  - last (numCols * numRows) bytes are the tile types (wall, ladder,...)\n\t *\n\t * @param {any} buffer\n\t *\n\t */",
        "meta": {
          "range": [
            9961,
            10178
          ],
          "filename": "Map.js",
          "lineno": 299,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000854",
            "name": "Map#setBuffer",
            "type": "MethodDefinition",
            "paramnames": [
              "buffer"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map tiles and tiletypes from binary buffer:\n - first (numCols * numRows) bytes are visual tile numbers\n - last (numCols * numRows) bytes are the tile types (wall, ladder,...)",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "name": "buffer"
          }
        ],
        "name": "setBuffer",
        "longname": "Map#setBuffer",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setBuffer"
      },
      {
        "comment": "/**\n     * Changes the easing function used when scrolling the viewport\n     *\n     * @param {String} easing='linear' The new easing function to use.\n     */",
        "meta": {
          "range": [
            7044,
            7124
          ],
          "filename": "Map.js",
          "lineno": 199,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000508",
            "name": "Map#setEasing",
            "type": "MethodDefinition",
            "paramnames": [
              "easing"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the easing function used when scrolling the viewport",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "defaultvalue": "'linear'",
            "description": "The new easing function to use.",
            "name": "easing"
          }
        ],
        "name": "setEasing",
        "longname": "Map#setEasing",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setEasing"
      },
      {
        "comment": "/**\n\t * Sets the master object, it will be used for:\n\t *  - scrolling the viewport when needed, centering it around the master sprite\n\t *  - collision detection\n\t *\n\t * @param {Drawable} obj The object to set as master.\n\t *\n\t */",
        "meta": {
          "range": [
            10812,
            11024
          ],
          "filename": "Map.js",
          "lineno": 327,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000968",
            "name": "Map#setMasterObject",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the master object, it will be used for:\n - scrolling the viewport when needed, centering it around the master sprite\n - collision detection",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to set as master.",
            "name": "obj"
          }
        ],
        "name": "setMasterObject",
        "longname": "Map#setMasterObject",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setMasterObject"
      },
      {
        "comment": "/**\n    * Calculates and sets the object's next x position using its current x, vx and\n    * avoids tileTypes tiles (ie: walls, moving platforms)\n    *\n    * @param {Drawable} sprite The sprite to get next position of.\n    * @param {Number} tileTypes The tileType.\n    * @returns {Boolean} Returns true if the object hit the spcified tile, false otherwise\n    *\n    */",
        "meta": {
          "range": [
            27672,
            29724
          ],
          "filename": "Map.js",
          "lineno": 846,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002456",
            "name": "Map#setNextX",
            "type": "MethodDefinition",
            "paramnames": [
              "sprite",
              "tileTypes"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Calculates and sets the object's next x position using its current x, vx and\navoids tileTypes tiles (ie: walls, moving platforms)",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The sprite to get next position of.",
            "name": "sprite"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The tileType.",
            "name": "tileTypes"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if the object hit the spcified tile, false otherwise"
          }
        ],
        "name": "setNextX",
        "longname": "Map#setNextX",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setNextX"
      },
      {
        "comment": "/**\n    * WIP: Calculates and sets the object's next y position using its current y, vy and\n    * avoids tileTypes tiles (ie: walls, moving platforms)\n    *\n    * @param {Drawable} sprite\n    * @param {any} tileTypes\n    * @returns {Boolean} true if the object hit a tile, false otherwise\n    *\n    */",
        "meta": {
          "range": [
            30036,
            30720
          ],
          "filename": "Map.js",
          "lineno": 904,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100002708",
            "name": "Map#setNextYTop",
            "type": "MethodDefinition",
            "paramnames": [
              "sprite",
              "tileTypes"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP: Calculates and sets the object's next y position using its current y, vy and\navoids tileTypes tiles (ie: walls, moving platforms)",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "name": "sprite"
          },
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "name": "tileTypes"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "true if the object hit a tile, false otherwise"
          }
        ],
        "name": "setNextYTop",
        "longname": "Map#setNextYTop",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setNextYTop"
      },
      {
        "comment": "/**\n     * saves a refrence to the scene the map is attached to\n     *\n     * @param {Scene} scene Reference to the scene the map is being attached to.\n     */",
        "meta": {
          "range": [
            9663,
            9714
          ],
          "filename": "Map.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000843",
            "name": "Map#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "saves a refrence to the scene the map is attached to",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "Reference to the scene the map is being attached to.",
            "name": "scene"
          }
        ],
        "name": "setScene",
        "longname": "Map#setScene",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setScene"
      },
      {
        "comment": "/**\n\t *\n\t * Changes the start position using the master's current position: usually called when reaching a checkpoint\n\t *\n\t */",
        "meta": {
          "range": [
            6760,
            6876
          ],
          "filename": "Map.js",
          "lineno": 189,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100000484",
            "name": "Map#setStartXYFromMaster",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the start position using the master's current position: usually called when reaching a checkpoint",
        "name": "setStartXYFromMaster",
        "longname": "Map#setStartXYFromMaster",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "params": [],
        "$longname": "Map#setStartXYFromMaster"
      },
      {
        "comment": "/**\n\t * Sets the map tile size (in pixels)\n\t *\n\t * @param {number} width of a map tile.\n\t * @param {number} height of a map tile.\n\t *\n\t */",
        "meta": {
          "range": [
            12720,
            12821
          ],
          "filename": "Map.js",
          "lineno": 395,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001122",
            "name": "Map#setTilesSize",
            "type": "MethodDefinition",
            "paramnames": [
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map tile size (in pixels)",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "of a map tile.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "of a map tile.",
            "name": "height"
          }
        ],
        "name": "setTilesSize",
        "longname": "Map#setTilesSize",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setTilesSize"
      },
      {
        "comment": "/**\n\t * changes current viewport size and position\n\t *\n\t * @param {number} x Horizontal position of the viewport.\n\t * @param {number} y Vertical position of the viewport.\n\t * @param {number} width Width of the viewport.\n\t * @param {number} height Height of the viewport.\n\t *\n\t * @note there is currently no boundaries checks\n\t *\n\t */",
        "meta": {
          "range": [
            13166,
            13327
          ],
          "filename": "Map.js",
          "lineno": 412,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001140",
            "name": "Map#setViewPort",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "changes current viewport size and position",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Horizontal position of the viewport.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Vertical position of the viewport.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Width of the viewport.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Height of the viewport.",
            "name": "height"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "there is currently no boundaries checks",
            "value": "there is currently no boundaries checks"
          }
        ],
        "name": "setViewPort",
        "longname": "Map#setViewPort",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#setViewPort"
      },
      {
        "comment": "/**\n     * shifts map from top to bottom\n     *\n     * @param {Number} startLine Where to start the copy.\n     * @param {Number} height How many lines to shift.\n     * @param {Number} tile Tile to use for new lines.\n     */",
        "meta": {
          "range": [
            53755,
            54158
          ],
          "filename": "Map.js",
          "lineno": 1627,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004810",
            "name": "Map#shift",
            "type": "MethodDefinition",
            "paramnames": [
              "startLine",
              "height",
              "tile"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "shifts map from top to bottom",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Where to start the copy.",
            "name": "startLine"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "How many lines to shift.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Tile to use for new lines.",
            "name": "tile"
          }
        ],
        "name": "shift",
        "longname": "Map#shift",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#shift"
      },
      {
        "comment": "/**\n\t * DEBUG: draw outline of each tile with a different color, depending\n\t * on the type of tile\n\t *\n\t * @param {CanvasContext} ctx The canvas context to render outline on.\n\t *\n\t */",
        "meta": {
          "range": [
            48156,
            49900
          ],
          "filename": "Map.js",
          "lineno": 1442,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004214",
            "name": "Map#showTileBehaviors",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx",
              "showHidden",
              "mapOffsetX",
              "mapOffsetY"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "DEBUG: draw outline of each tile with a different color, depending\non the type of tile",
        "params": [
          {
            "type": {
              "names": [
                "CanvasContext"
              ]
            },
            "description": "The canvas context to render outline on.",
            "name": "ctx"
          }
        ],
        "name": "showTileBehaviors",
        "longname": "Map#showTileBehaviors",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#showTileBehaviors"
      },
      {
        "comment": "/**\n\t * Handle moving map & its objects:\n\t *  - updates the viewport window if map.moving is set\n\t *  - checks for triggers (that could spawn new objects onto the map)\n\t *  - move platforms and objects\n\t *\n     * @param {Number} timestamp current time\n\t */",
        "meta": {
          "range": [
            14869,
            16141
          ],
          "filename": "Map.js",
          "lineno": 473,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100001247",
            "name": "Map#update",
            "type": "MethodDefinition",
            "paramnames": [
              "timestamp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Handle moving map & its objects:\n - updates the viewport window if map.moving is set\n - checks for triggers (that could spawn new objects onto the map)\n - move platforms and objects",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "current time",
            "name": "timestamp"
          }
        ],
        "name": "update",
        "longname": "Map#update",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#update"
      },
      {
        "comment": "/**\n     * updates individual tile & tile behavior\n     *\n     * @param {Number} col The column of the tile to update.\n     * @param {Number} row The row of the tile to update.\n     * @param {Number} [tileNum=-1] The new tile number to use, the previous one will be kept if tileNum === -1.\n     * @param {Number} [behavior=-1] The new tile behavior, the previous value will be kept if behavior === -1.\n     *\n     */",
        "meta": {
          "range": [
            53190,
            53521
          ],
          "filename": "Map.js",
          "lineno": 1606,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100004746",
            "name": "Map#updateTile",
            "type": "MethodDefinition",
            "paramnames": [
              "col",
              "row",
              "tileNum",
              "behavior"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "updates individual tile & tile behavior",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The column of the tile to update.",
            "name": "col"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The row of the tile to update.",
            "name": "row"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": -1,
            "description": "The new tile number to use, the previous one will be kept if tileNum === -1.",
            "name": "tileNum"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": -1,
            "description": "The new tile behavior, the previous value will be kept if behavior === -1.",
            "name": "behavior"
          }
        ],
        "name": "updateTile",
        "longname": "Map#updateTile",
        "kind": "function",
        "memberof": "Map",
        "scope": "instance",
        "$longname": "Map#updateTile"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Map\n     *\n     * @param {Object} options\n     * @param {String} options.src The url to an image that will be used for the tiles\n     * @param {Number} options.tileWidth The width of a tile\n     * @param {Number} options.tileHeight The height of a tile\n     * @param {Number} options.width The full width of the map\n     * @param {Number} options.height The full height of the map\n     * @param {Number} options.viewportW The width of the viewport: it is usually the same as the game width. Default = map.width\n     * @param {Number} options.viewportH The height of the viewport: it is usually the same as the game height. Default = map.height\n     * @param {Number} [options.viewportX=0] Initial x viewport (horizontal scrolling position) of the map.\n     * @param {Number} [options.viewportY=0] Initial y viewport (vertical scrolling position) of the map.\n     * @param {Array} [options.tiles] An optionnal array with the tiles to use for the map.\n     * @param {String} [options.name='map'] An optional name for the map.\n     * @param {String} [options.easing='linear'] The linear function to use when scrolling the map. Defaults to linear.\n     * @param {Number} [options.startX=0] The start x position of the master object.\n     * @param {Sumber} [options.startY=0] The start y position of the master object.\n     * @param {ArrayBuffer} options.buffer The buffer containing width \\* height bytes container tile numbers followed by width*height bytes for the tile behaviors\n     * @example\n     * // Creates a new 800x600 map, with a 320x200 viewport and 32x32 tiles\n     * var map = new Map({\n     *    src: 'mapTiles.jpg',\n     *    tileWidth: 32,\n     *    tileHeight: 32,\n     *    width: 800,\n     *    height: 600,\n     *    viewportW: 320,\n     *    viewportH: 200,\n     *    buffer: new ArrayBuffer(800*600*2),\n     * });\n     */",
      "meta": {
        "range": [
          2418,
          6623
        ],
        "filename": "Map.js",
        "lineno": 52,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
        "code": {
          "id": "astnode100000031",
          "name": "Map",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Map",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The url to an image that will be used for the tiles",
          "name": "options.src"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The width of a tile",
          "name": "options.tileWidth"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The height of a tile",
          "name": "options.tileHeight"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The full width of the map",
          "name": "options.width"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The full height of the map",
          "name": "options.height"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The width of the viewport: it is usually the same as the game width. Default = map.width",
          "name": "options.viewportW"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The height of the viewport: it is usually the same as the game height. Default = map.height",
          "name": "options.viewportH"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Initial x viewport (horizontal scrolling position) of the map.",
          "name": "options.viewportX"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Initial y viewport (vertical scrolling position) of the map.",
          "name": "options.viewportY"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An optionnal array with the tiles to use for the map.",
          "name": "options.tiles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "'map'",
          "description": "An optional name for the map.",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "'linear'",
          "description": "The linear function to use when scrolling the map. Defaults to linear.",
          "name": "options.easing"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start x position of the master object.",
          "name": "options.startX"
        },
        {
          "type": {
            "names": [
              "Sumber"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start y position of the master object.",
          "name": "options.startY"
        },
        {
          "type": {
            "names": [
              "ArrayBuffer"
            ]
          },
          "description": "The buffer containing width \\* height bytes container tile numbers followed by width*height bytes for the tile behaviors",
          "name": "options.buffer"
        }
      ],
      "examples": [
        "// Creates a new 800x600 map, with a 320x200 viewport and 32x32 tiles\nvar map = new Map({\n   src: 'mapTiles.jpg',\n   tileWidth: 32,\n   tileHeight: 32,\n   width: 800,\n   height: 600,\n   viewportW: 320,\n   viewportH: 200,\n   buffer: new ArrayBuffer(800*600*2),\n});"
      ],
      "name": "Map",
      "longname": "Map",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Map"
    }
  },
  {
    "comment": "/**\n * MapEvent handles events that are triggered on the map.\n * Such events can be: checkpoint was reached, new wave needs to\n * be generated, etc...\n *\n * For that, the MapEvent class stores a list of items, events, switches\n * that are on the map.\n *\n * This is a default MapEvent class: games should extend MapEvent\n * to handle whatever events they need.\n *\n */",
    "meta": {
      "range": [
        451,
        6737
      ],
      "filename": "MapEvent.js",
      "lineno": 16,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
      "code": {
        "id": "astnode100005333",
        "name": "MapEvent",
        "type": "ClassDeclaration",
        "paramnames": [
          "map"
        ]
      }
    },
    "classdesc": "MapEvent handles events that are triggered on the map.\nSuch events can be: checkpoint was reached, new wave needs to\nbe generated, etc...\n\nFor that, the MapEvent class stores a list of items, events, switches\nthat are on the map.\n\nThis is a default MapEvent class: games should extend MapEvent\nto handle whatever events they need.",
    "name": "MapEvent",
    "longname": "MapEvent",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new MapEvent",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "name": "map"
      }
    ],
    "$longname": "MapEvent",
    "$members": [
      {
        "comment": "/**\n     * Adds a new [`Drawable`]{#item} onto the map\n     *\n     * @param {String} id of the item to add\n     * @param {Drawable} item to add\n     */",
        "meta": {
          "range": [
            1008,
            1064
          ],
          "filename": "MapEvent.js",
          "lineno": 43,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005382",
            "name": "MapEvent#addItem",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "item"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a new [`Drawable`]{#item} onto the map",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "of the item to add",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "to add",
            "name": "item"
          }
        ],
        "name": "addItem",
        "longname": "MapEvent#addItem",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#addItem"
      },
      {
        "comment": "/**\n     * checks of conditions of specified trigger are valid\n     *\n     * @param {Object} trigger The trigger to check.\n     *\n     * @returns {Boolean} true if the trigger is valid\n     */",
        "meta": {
          "range": [
            2062,
            3023
          ],
          "filename": "MapEvent.js",
          "lineno": 85,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005461",
            "name": "MapEvent#checkConditions",
            "type": "MethodDefinition",
            "paramnames": [
              "trigger"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "checks of conditions of specified trigger are valid",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The trigger to check.",
            "name": "trigger"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "true if the trigger is valid"
          }
        ],
        "name": "checkConditions",
        "longname": "MapEvent#checkConditions",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#checkConditions"
      },
      {
        "comment": "/**\n     * Returns an item\n     *\n     * @param {String} id of the item to retrieve\n     *\n     * @returns {Drawable|undefined} The item or undefined if it wasn't handled by the map\n     */",
        "meta": {
          "range": [
            1264,
            1314
          ],
          "filename": "MapEvent.js",
          "lineno": 54,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005396",
            "name": "MapEvent#getItem",
            "type": "MethodDefinition",
            "paramnames": [
              "id"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns an item",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "of the item to retrieve",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable",
                "undefined"
              ]
            },
            "description": "The item or undefined if it wasn't handled by the map"
          }
        ],
        "name": "getItem",
        "longname": "MapEvent#getItem",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#getItem"
      },
      {
        "comment": "/**\n     * Retrieves a switch from the map using its id\n     *\n     * @param {String} id The switch to retrieve.\n     *\n     * @returns {any} returns the switch or false if it could not be found\n     */",
        "meta": {
          "range": [
            1795,
            1859
          ],
          "filename": "MapEvent.js",
          "lineno": 74,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005448",
            "name": "MapEvent#getSwitch",
            "type": "MethodDefinition",
            "paramnames": [
              "id"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Retrieves a switch from the map using its id",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The switch to retrieve.",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "returns the switch or false if it could not be found"
          }
        ],
        "name": "getSwitch",
        "longname": "MapEvent#getSwitch",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#getSwitch"
      },
      {
        "comment": "/**\n     * Add a new wave of objects to the map\n\t * Used for example when the player triggers apparition of several enemies or bonuses\n     *\n     * @param {Object} options The options to pass to the wav object\n     * @returns {Boolean}\n     *\n\t * @related {Wave}\n     */",
        "meta": {
          "range": [
            5979,
            6396
          ],
          "filename": "MapEvent.js",
          "lineno": 213,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005737",
            "name": "MapEvent#handleWave",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new wave of objects to the map\nUsed for example when the player triggers apparition of several enemies or bonuses",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options to pass to the wav object",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            }
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Wave}",
            "value": "{Wave}"
          }
        ],
        "name": "handleWave",
        "longname": "MapEvent#handleWave",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#handleWave"
      },
      {
        "comment": "/**\n     * Resets the MapEvent switches, events and items\n     */",
        "meta": {
          "range": [
            752,
            846
          ],
          "filename": "MapEvent.js",
          "lineno": 31,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005360",
            "name": "MapEvent#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Resets the MapEvent switches, events and items",
        "name": "reset",
        "longname": "MapEvent#reset",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "params": [],
        "$longname": "MapEvent#reset"
      },
      {
        "comment": "/**\n     * Schedule adding a new object to the map\n     *\n     * @param {String} spriteId The id of the new sprite to add.\n     * @param {Object} spriteOptions The options that will be passed to the object constructor.\n     * @param {Number} [delay=0] The delay in milliseconds to wait before adding the object.\n     * @returns {Drawable} the new drawable\n     *\n     */",
        "meta": {
          "range": [
            5132,
            5696
          ],
          "filename": "MapEvent.js",
          "lineno": 186,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005693",
            "name": "MapEvent#scheduleSprite",
            "type": "MethodDefinition",
            "paramnames": [
              "spriteId",
              "spriteOptions",
              "delay"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Schedule adding a new object to the map",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the new sprite to add.",
            "name": "spriteId"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options that will be passed to the object constructor.",
            "name": "spriteOptions"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The delay in milliseconds to wait before adding the object.",
            "name": "delay"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "the new drawable"
          }
        ],
        "name": "scheduleSprite",
        "longname": "MapEvent#scheduleSprite",
        "kind": "function",
        "memberof": "MapEvent",
        "scope": "instance",
        "$longname": "MapEvent#scheduleSprite"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new MapEvent\n     *\n     * @param {Map} map\n     */",
      "meta": {
        "range": [
          549,
          676
        ],
        "filename": "MapEvent.js",
        "lineno": 22,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
        "code": {
          "id": "astnode100005336",
          "name": "MapEvent",
          "type": "MethodDefinition",
          "paramnames": [
            "map"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new MapEvent",
      "params": [
        {
          "type": {
            "names": [
              "Map"
            ]
          },
          "name": "map"
        }
      ],
      "name": "MapEvent",
      "longname": "MapEvent",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "MapEvent"
    }
  },
  {
    "comment": "/**\n * Class that describes a tile\n * \n * @param {Object} options\n * @param {Number} [options.offsetX=0] The horizontal offset of the tile in the tilesheet.\n * @param {Number} [options.offsetY=0] The vertical offset of the tile in the tilesheet.\n * @param {Number} [options.width=16] The tile width in pixels.\n * @param {Number} [options.height=16] The tile height in pixels.\n */",
    "meta": {
      "range": [
        380,
        1196
      ],
      "filename": "Tile.js",
      "lineno": 10,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
      "code": {
        "id": "astnode100005836",
        "name": "Tile",
        "type": "ClassDeclaration",
        "paramnames": [
          "options"
        ]
      }
    },
    "classdesc": "Class that describes a tile",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The horizontal offset of the tile in the tilesheet.",
        "name": "options.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The vertical offset of the tile in the tilesheet.",
        "name": "options.offsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 16,
        "description": "The tile width in pixels.",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 16,
        "description": "The tile height in pixels.",
        "name": "options.height"
      }
    ],
    "name": "Tile",
    "longname": "Tile",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Tile",
    "$longname": "Tile",
    "$members": [
      {
        "comment": "/**\n     * Static tile behaviors\n     */",
        "meta": {
          "range": [
            1078,
            1194
          ],
          "filename": "Tile.js",
          "lineno": 30,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
          "code": {
            "id": "astnode100005914",
            "name": "Tile.TYPE",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Static tile behaviors",
        "name": "TYPE",
        "longname": "Tile.TYPE",
        "kind": "member",
        "memberof": "Tile",
        "scope": "static",
        "params": [],
        "$longname": "Tile.TYPE"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Tile\n     */",
      "meta": {
        "range": [
          439,
          1027
        ],
        "filename": "Tile.js",
        "lineno": 14,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Map",
        "code": {
          "id": "astnode100005839",
          "name": "Tile",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Tile",
      "name": "Tile",
      "longname": "Tile",
      "kind": "class",
      "scope": "global",
      "params": [],
      "undocumented": true,
      "$longname": "Tile"
    }
  }
]