[
  {
    "comment": "/**\n * The BitmapText class allows to use a spritesheet as a font to draw text onto the screen\n * \n * @extends Drawable\n */",
    "meta": {
      "range": [
        187,
        14846
      ],
      "filename": "BitmapText.js",
      "lineno": 9,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100000010",
        "name": "BitmapText",
        "type": "ClassDeclaration",
        "paramnames": [
          "type",
          "options"
        ]
      }
    },
    "classdesc": "The BitmapText class allows to use a spritesheet as a font to draw text onto the screen",
    "augments": [
      "Drawable"
    ],
    "name": "BitmapText",
    "longname": "BitmapText",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new BitmapText Drawable",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "'BitmapText'",
        "description": "The type of the sprite.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The options describing the BitmapText.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The path to the spritesheet file.",
        "name": "options.imageId"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The width of a character in pixels.",
        "name": "options.charWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The height of a character in pixels.",
        "name": "options.charHeight"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The list of supported characters in the spritesheet",
        "name": "options.characters"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": "charWidth",
        "description": "The full width of the character (including spaces) inside the spritesheet",
        "name": "options.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 2,
        "description": "The space between each drawn character (in pixels).",
        "name": "options.letterSpacing"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The optinal vertical offset at which to start getting bitmap characters.",
        "name": "options.startY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The optinal hoeizontal offset at which to start getting bitmap characters.",
        "name": "options.startX"
      }
    ],
    "$longname": "BitmapText",
    "$members": [
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "BitmapText#addChild",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#addChild",
        "inherited": true,
        "$longname": "BitmapText#addChild"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "BitmapText#addMoveHandler",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#addMoveHandler",
        "inherited": true,
        "$longname": "BitmapText#addMoveHandler"
      },
      {
        "comment": "/**\n     * Performs an animation on the object using one of the defined {FX} effects\n     *\n     * Effects change the object size/position using an interpolation function.\n     *\n     * Athena has the following effects:\n     * - {Fade} performs a fade\n     * - {Mosaic} performs a SNES-like mosaic effect\n     * - {Rotate} performs a rotation on the object\n     *\n     * @param {String} fxName The name of the effect to use.\n     * @param {Object} options The options of the effect.\n     * @param {String} [options.easing=\"linear\"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.\n     *\n     * @returns {Promise} a promise that will be fullfilled when the effect has been completed\n     */",
        "meta": {
          "range": [
            22387,
            23190
          ],
          "filename": "Drawable.js",
          "lineno": 785,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003490",
            "name": "Drawable#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "fxName",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs an animation on the object using one of the defined {FX} effects\n\nEffects change the object size/position using an interpolation function.\n\nAthena has the following effects:\n- {Fade} performs a fade\n- {Mosaic} performs a SNES-like mosaic effect\n- {Rotate} performs a rotation on the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the effect to use.",
            "name": "fxName"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options of the effect.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.",
            "name": "options.easing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "a promise that will be fullfilled when the effect has been completed"
          }
        ],
        "name": "animate",
        "longname": "BitmapText#animate",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#animate",
        "inherited": true,
        "$longname": "BitmapText#animate"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "BitmapText#cancelMoveTo",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#cancelMoveTo",
        "inherited": true,
        "$longname": "BitmapText#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "BitmapText#center",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#center",
        "inherited": true,
        "$longname": "BitmapText#center"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "BitmapText#clearBehavior",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#clearBehavior",
        "inherited": true,
        "$longname": "BitmapText#clearBehavior"
      },
      {
        "comment": "/**\n     * Clears the buffer\n     */",
        "meta": {
          "range": [
            3320,
            3401
          ],
          "filename": "BitmapText.js",
          "lineno": 99,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000187",
            "name": "BitmapText#clearBuffer",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Clears the buffer",
        "name": "clearBuffer",
        "longname": "BitmapText#clearBuffer",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "$longname": "BitmapText#clearBuffer"
      },
      {
        "comment": "/**\n     * Generates a new buffer that can hold current text\n     *\n     * @param {Display} display the display to get the buffer from\n     */",
        "meta": {
          "range": [
            2972,
            3273
          ],
          "filename": "BitmapText.js",
          "lineno": 87,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000160",
            "name": "BitmapText#createBuffer",
            "type": "MethodDefinition",
            "paramnames": [
              "display"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Generates a new buffer that can hold current text",
        "params": [
          {
            "type": {
              "names": [
                "Display"
              ]
            },
            "description": "the display to get the buffer from",
            "name": "display"
          }
        ],
        "name": "createBuffer",
        "longname": "BitmapText#createBuffer",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#createBuffer"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "BitmapText#destroy",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#destroy",
        "inherited": true,
        "$longname": "BitmapText#destroy"
      },
      {
        "comment": "/**\n     * Draws the specified line onto the screen\n     *\n     * @param {Object} options\n     * @param {Number} options.x The horizontal position of the line to draw\n     * @param {Number} options.x The vertical position of the line to draw\n     * @param {String} options.text The text to draw\n     *\n     * @example\n     *\n     * bitmapText.drawLine({\n     * \tx: 0,\n     *  y: 0,\n     *  text: 'hi there'\n     * })\n     */",
        "meta": {
          "range": [
            10946,
            11689
          ],
          "filename": "BitmapText.js",
          "lineno": 343,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000883",
            "name": "BitmapText#drawLine",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the specified line onto the screen",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The horizontal position of the line to draw",
            "name": "options.x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The vertical position of the line to draw",
            "name": "options.x"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The text to draw",
            "name": "options.text"
          }
        ],
        "examples": [
          "bitmapText.drawLine({\n\tx: 0,\n y: 0,\n text: 'hi there'\n})"
        ],
        "name": "drawLine",
        "longname": "BitmapText#drawLine",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#drawLine"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "BitmapText#getAngle",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getAngle",
        "inherited": true,
        "$longname": "BitmapText#getAngle"
      },
      {
        "comment": "/**\n     * Returns the character horizontal offset in pixels inside the spritesheet\n     *\n     * @param {String} char The character to get the position inside the spritesheet\n     *\n     * @returns {Number} The horizontal offset in pixels of the character\n     */",
        "meta": {
          "range": [
            10159,
            10511
          ],
          "filename": "BitmapText.js",
          "lineno": 314,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000844",
            "name": "BitmapText#getCharOffset",
            "type": "MethodDefinition",
            "paramnames": [
              "char"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the character horizontal offset in pixels inside the spritesheet",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The character to get the position inside the spritesheet",
            "name": "char"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The horizontal offset in pixels of the character"
          }
        ],
        "name": "getCharOffset",
        "longname": "BitmapText#getCharOffset",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#getCharOffset"
      },
      {
        "comment": "/**\n     * Returns the current height of the object: with some types of Drawables ({Sprite}),\n     * height can vary\n     *\n     * @returns {number} The current height of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            16008,
            16062
          ],
          "filename": "Drawable.js",
          "lineno": 590,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002825",
            "name": "Drawable#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current height of the object: with some types of Drawables ({Sprite}),\nheight can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current height of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "BitmapText#getCurrentHeight",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentHeight",
        "inherited": true,
        "$longname": "BitmapText#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the current width of the drawable: with some types of drawables ({Sprite}),\n     * width can vary\n     *\n     * @returns {number} The current width of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            15724,
            15776
          ],
          "filename": "Drawable.js",
          "lineno": 578,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002817",
            "name": "Drawable#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current width of the drawable: with some types of drawables ({Sprite}),\nwidth can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current width of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "BitmapText#getCurrentWidth",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentWidth",
        "inherited": true,
        "$longname": "BitmapText#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the object's hitbox.\n     *\n     * Some drawables (eg. {Sprite} may have different hitbox for different frames.\n     *\n     * @returns {Object} an object with x, y, x2, Y2 describing the hit box\n     */",
        "meta": {
          "range": [
            16294,
            16465
          ],
          "filename": "Drawable.js",
          "lineno": 601,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002833",
            "name": "Drawable#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the object's hitbox.\n\nSome drawables (eg. {Sprite} may have different hitbox for different frames.",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an object with x, y, x2, Y2 describing the hit box"
          }
        ],
        "name": "getHitBox",
        "longname": "BitmapText#getHitBox",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getHitBox",
        "inherited": true,
        "$longname": "BitmapText#getHitBox"
      },
      {
        "comment": "/**\n     * Calculates the position and size of each pixel lines to be rendered onto the screen\n     */",
        "meta": {
          "range": [
            5067,
            6354
          ],
          "filename": "BitmapText.js",
          "lineno": 160,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000358",
            "name": "BitmapText#getLines",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Calculates the position and size of each pixel lines to be rendered onto the screen",
        "name": "getLines",
        "longname": "BitmapText#getLines",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "$longname": "BitmapText#getLines"
      },
      {
        "comment": "/**\n     * Returns the length of a text line, in characters\n     *\n     * @param {String} str The string to mesure.\n     * @param {String} eof The character to use as end of line.\n     *\n     * @returns {Number} The length of the string\n     */",
        "meta": {
          "range": [
            4776,
            4954
          ],
          "filename": "BitmapText.js",
          "lineno": 146,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000330",
            "name": "BitmapText#getNextLineLength",
            "type": "MethodDefinition",
            "paramnames": [
              "str",
              "eof"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the length of a text line, in characters",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The string to mesure.",
            "name": "str"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The character to use as end of line.",
            "name": "eof"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The length of the string"
          }
        ],
        "name": "getNextLineLength",
        "longname": "BitmapText#getNextLineLength",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#getNextLineLength"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "BitmapText#getOpacity",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getOpacity",
        "inherited": true,
        "$longname": "BitmapText#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "BitmapText#getSavedPosition",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getSavedPosition",
        "inherited": true,
        "$longname": "BitmapText#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "BitmapText#hide",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#hide",
        "inherited": true,
        "$longname": "BitmapText#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "BitmapText#hitTest",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#hitTest",
        "inherited": true,
        "$longname": "BitmapText#hitTest"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "BitmapText#moveTo",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#moveTo",
        "inherited": true,
        "$longname": "BitmapText#moveTo"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "BitmapText#notify",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#notify",
        "inherited": true,
        "$longname": "BitmapText#notify"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "BitmapText#onCollision",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#onCollision",
        "inherited": true,
        "$longname": "BitmapText#onCollision"
      },
      {
        "comment": "/**\n     * onHit is called when the object collides with another object\n     *\n     * @param {Drawable} obj The object that collided.\n     *\n     * This function does nothing interesting: this should be extended if needed.\n     */",
        "meta": {
          "range": [
            21011,
            21146
          ],
          "filename": "Drawable.js",
          "lineno": 740,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003419",
            "name": "Drawable#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "onHit is called when the object collides with another object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object that collided.\n\nThis function does nothing interesting: this should be extended if needed.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "BitmapText#onHit",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#onHit",
        "inherited": true,
        "$longname": "BitmapText#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "BitmapText#playSound",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#playSound",
        "inherited": true,
        "$longname": "BitmapText#playSound"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "BitmapText#removeAllChildren",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#removeAllChildren",
        "inherited": true,
        "$longname": "BitmapText#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "BitmapText#removeChild",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#removeChild",
        "inherited": true,
        "$longname": "BitmapText#removeChild"
      },
      {
        "comment": "/**\n     * Pre-renders text from this.textArray into the internal buffer\n     *\n     */",
        "meta": {
          "range": [
            11787,
            12021
          ],
          "filename": "BitmapText.js",
          "lineno": 368,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001004",
            "name": "BitmapText#renderText",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Pre-renders text from this.textArray into the internal buffer",
        "name": "renderText",
        "longname": "BitmapText#renderText",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "$longname": "BitmapText#renderText"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "BitmapText#reset",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#reset",
        "inherited": true,
        "$longname": "BitmapText#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "BitmapText#restoreCtxAlpha",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#restoreCtxAlpha",
        "inherited": true,
        "$longname": "BitmapText#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "BitmapText#savePosition",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#savePosition",
        "inherited": true,
        "$longname": "BitmapText#savePosition"
      },
      {
        "comment": "/**\n     * Scrolls text from the bottom to the top, firing an optional callback at the end\n     *\n     * @param {Number} The duration of the scrolling in milliseconds.\n     * @param {Function} [callback=undefined] An optional callback to fire when the scrolling is over.\n     */",
        "meta": {
          "range": [
            6643,
            6958
          ],
          "filename": "BitmapText.js",
          "lineno": 208,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000535",
            "name": "BitmapText#scrollFromBottom",
            "type": "MethodDefinition",
            "paramnames": [
              "duration",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Scrolls text from the bottom to the top, firing an optional callback at the end",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "duration of the scrolling in milliseconds.",
            "name": "The"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "An optional callback to fire when the scrolling is over.",
            "name": "callback"
          }
        ],
        "name": "scrollFromBottom",
        "longname": "BitmapText#scrollFromBottom",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#scrollFromBottom"
      },
      {
        "comment": "/**\n     * Scrolls text from the top, firing an optional callback at the end\n     *\n     * @param {Number} duration The duration of the scrolling in milliseconds.\n     * @param {Function} [callback=undefined] An optional callback to fire when the scrolling is over.\n     */",
        "meta": {
          "range": [
            7242,
            7531
          ],
          "filename": "BitmapText.js",
          "lineno": 226,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000569",
            "name": "BitmapText#scrollFromTop",
            "type": "MethodDefinition",
            "paramnames": [
              "duration",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Scrolls text from the top, firing an optional callback at the end",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The duration of the scrolling in milliseconds.",
            "name": "duration"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "An optional callback to fire when the scrolling is over.",
            "name": "callback"
          }
        ],
        "name": "scrollFromTop",
        "longname": "BitmapText#scrollFromTop",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#scrollFromTop"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "BitmapText#setAngle",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setAngle",
        "inherited": true,
        "$longname": "BitmapText#setAngle"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "BitmapText#setBehavior",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setBehavior",
        "inherited": true,
        "$longname": "BitmapText#setBehavior"
      },
      {
        "comment": "/**\n     * Sets bitmapText properties using options\n     *\n     * @param {Object} options\n     */",
        "meta": {
          "range": [
            3509,
            4132
          ],
          "filename": "BitmapText.js",
          "lineno": 108,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000203",
            "name": "BitmapText#setFontParams",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets bitmapText properties using options",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          }
        ],
        "name": "setFontParams",
        "longname": "BitmapText#setFontParams",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#setFontParams"
      },
      {
        "comment": "/**\n     * Changes the image to use as spritesheet\n     *\n     * @param {Image} image The new {image} to use as source.\n     */",
        "meta": {
          "range": [
            12673,
            12879
          ],
          "filename": "BitmapText.js",
          "lineno": 407,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001092",
            "name": "BitmapText#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the image to use as spritesheet",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "The new {image} to use as source.",
            "name": "image"
          }
        ],
        "name": "setImage",
        "longname": "BitmapText#setImage",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "overrides": "Drawable#setImage",
        "$longname": "BitmapText#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "BitmapText#setMap",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setMap",
        "inherited": true,
        "$longname": "BitmapText#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "BitmapText#setMask",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setMask",
        "inherited": true,
        "$longname": "BitmapText#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "BitmapText#setOpacity",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setOpacity",
        "inherited": true,
        "$longname": "BitmapText#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "BitmapText#setPath",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setPath",
        "inherited": true,
        "$longname": "BitmapText#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "BitmapText#setPlatform",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setPlatform",
        "inherited": true,
        "$longname": "BitmapText#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "BitmapText#setScale",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#setScale",
        "inherited": true,
        "$longname": "BitmapText#setScale"
      },
      {
        "comment": "/**\n     * Sets the scene of the bitmap font\n     *\n     * @param {Scene} scene The scene to use.\n     */",
        "meta": {
          "range": [
            12995,
            13083
          ],
          "filename": "BitmapText.js",
          "lineno": 421,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001121",
            "name": "BitmapText#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the scene of the bitmap font",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "The scene to use.",
            "name": "scene"
          }
        ],
        "name": "setScene",
        "longname": "BitmapText#setScene",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "overrides": "Drawable#setScene",
        "$longname": "BitmapText#setScene"
      },
      {
        "comment": "/**\n     * Changes the text of the sprite, calculates every line size, and renders it into\n     * the internal buffer\n     *\n     * @param {String} text The new text to use\n     */",
        "meta": {
          "range": [
            12212,
            12535
          ],
          "filename": "BitmapText.js",
          "lineno": 387,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001049",
            "name": "BitmapText#setText",
            "type": "MethodDefinition",
            "paramnames": [
              "text"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the text of the sprite, calculates every line size, and renders it into\nthe internal buffer",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The new text to use",
            "name": "text"
          }
        ],
        "name": "setText",
        "longname": "BitmapText#setText",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "$longname": "BitmapText#setText"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "BitmapText#show",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#show",
        "inherited": true,
        "$longname": "BitmapText#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "BitmapText#showHitBox",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#showHitBox",
        "inherited": true,
        "$longname": "BitmapText#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "BitmapText#showObjectBox",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#showObjectBox",
        "inherited": true,
        "$longname": "BitmapText#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "BitmapText#snapToMap",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#snapToMap",
        "inherited": true,
        "$longname": "BitmapText#snapToMap"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "BitmapText#stopAnimate",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "inherits": "Drawable#stopAnimate",
        "inherited": true,
        "$longname": "BitmapText#stopAnimate"
      },
      {
        "comment": "/**\n     * update() is called at each render loop and calculates the next position during a scrolling\n     */",
        "meta": {
          "range": [
            9058,
            9884
          ],
          "filename": "BitmapText.js",
          "lineno": 284,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100000723",
            "name": "BitmapText#update",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "update() is called at each render loop and calculates the next position during a scrolling",
        "name": "update",
        "longname": "BitmapText#update",
        "kind": "function",
        "memberof": "BitmapText",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#update",
        "$longname": "BitmapText#update"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new BitmapText Drawable\n     * \n     * @param {String} [type='BitmapText'] The type of the sprite.\n     * @param {Object} options The options describing the BitmapText.\n     * @param {String} options.imageId The path to the spritesheet file.\n     * @param {Number} [options.charWidth] The width of a character in pixels.\n     * @param {Number} [options.charHeight] The height of a character in pixels.\n     * @param {String} [options.characters] The list of supported characters in the spritesheet\n     * @param {Number} [options.offsetX=charWidth] The full width of the character (including spaces) inside the spritesheet\n     * @param {Number} [options.letterSpacing=2] The space between each drawn character (in pixels).\n     * @param {Number} [options.startY=0] The optinal vertical offset at which to start getting bitmap characters.\n     * @param {Number} [options.startX=0] The optinal hoeizontal offset at which to start getting bitmap characters.\n     *\n     * @note the charset is limited to a subset of ascii right now: a-z 0-9\n     * @example\n     *\n     *  let myFont = new BitmapText('myFont', {\n     *      charWidth: 18,\n     *      charHeight: 18,\n     *      imageId: 'font'\n     *      offsetX: 34,\n     *      startY: 36\n     *   });\n     *\n     */",
      "meta": {
        "range": [
          1521,
          2819
        ],
        "filename": "BitmapText.js",
        "lineno": 36,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100000014",
          "name": "BitmapText",
          "type": "MethodDefinition",
          "paramnames": [
            "type",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new BitmapText Drawable",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "'BitmapText'",
          "description": "The type of the sprite.",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The options describing the BitmapText.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The path to the spritesheet file.",
          "name": "options.imageId"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The width of a character in pixels.",
          "name": "options.charWidth"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The height of a character in pixels.",
          "name": "options.charHeight"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The list of supported characters in the spritesheet",
          "name": "options.characters"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "charWidth",
          "description": "The full width of the character (including spaces) inside the spritesheet",
          "name": "options.offsetX"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "The space between each drawn character (in pixels).",
          "name": "options.letterSpacing"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The optinal vertical offset at which to start getting bitmap characters.",
          "name": "options.startY"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The optinal hoeizontal offset at which to start getting bitmap characters.",
          "name": "options.startX"
        }
      ],
      "tags": [
        {
          "originalTitle": "note",
          "title": "note",
          "text": "the charset is limited to a subset of ascii right now: a-z 0-9",
          "value": "the charset is limited to a subset of ascii right now: a-z 0-9"
        }
      ],
      "examples": [
        "let myFont = new BitmapText('myFont', {\n     charWidth: 18,\n     charHeight: 18,\n     imageId: 'font'\n     offsetX: 34,\n     startY: 36\n  });"
      ],
      "name": "BitmapText",
      "longname": "BitmapText",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "BitmapText"
    }
  },
  {
    "comment": "/**\n * Very basic wrapper for canvas drawing methods\n * Incomplete: missing translate, rotates, scale support\n *\n * @extends Drawable\n */",
    "meta": {
      "range": [
        215,
        4848
      ],
      "filename": "Paint.js",
      "lineno": 10,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100004588",
        "name": "Canvas",
        "type": "ClassDeclaration",
        "paramnames": [
          "name",
          "options"
        ]
      }
    },
    "classdesc": "Very basic wrapper for canvas drawing methods\nIncomplete: missing translate, rotates, scale support",
    "augments": [
      "Drawable"
    ],
    "name": "Canvas",
    "longname": "Canvas",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Canvas instance",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The name of the Canvas element.",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The width of the Canvas element.",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The height of the Canvas element.",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The horizontal position of the element.",
        "name": "options.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "The vertical position of the element.",
        "name": "options.y"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The color of the element. Can be changed by subsequent drawing method calls.",
        "name": "options.color"
      }
    ],
    "$longname": "Canvas",
    "$members": [
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "Canvas#addChild",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#addChild",
        "inherited": true,
        "$longname": "Canvas#addChild"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "Canvas#addMoveHandler",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#addMoveHandler",
        "inherited": true,
        "$longname": "Canvas#addMoveHandler"
      },
      {
        "comment": "/**\n     * Since the Canvas Drawable only supports the Fade effect, we override\n     * the Drawable's animate method and print a warning in case the user\n     * attempts to run an unsupported animation.\n     *\n     * @param {String} name The name of the animation to run.\n     * @param {Object} options\n     */",
        "meta": {
          "range": [
            4571,
            4846
          ],
          "filename": "Paint.js",
          "lineno": 144,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004945",
            "name": "Canvas#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "name",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Since the Canvas Drawable only supports the Fade effect, we override\nthe Drawable's animate method and print a warning in case the user\nattempts to run an unsupported animation.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the animation to run.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          }
        ],
        "name": "animate",
        "longname": "Canvas#animate",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "overrides": "Drawable#animate",
        "$longname": "Canvas#animate"
      },
      {
        "comment": "/**\n     * Draws an arc\n     *\n     * @param {Number} x The arc's center x position, related to the canvas'position.\n     * @param {Number} y The arc's center y position, related to the canvas'position.\n     * @param {Number} radius The arc's radius, in radian.\n     * @param {Number} startAngle The arc's start angle, in radian.\n     * @param {Number} endAngle The arc's send angle, in radian.\n     * @param {String} strokeStyle The arc's stroke style.\n     * @param {Number} strokeWidth The arc's line width.\n     */",
        "meta": {
          "range": [
            3931,
            4250
          ],
          "filename": "Paint.js",
          "lineno": 126,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004883",
            "name": "Canvas#arc",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "startAngle",
              "endAngle",
              "strokeStyle",
              "strokeWidth"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws an arc",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's center x position, related to the canvas'position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's center y position, related to the canvas'position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's radius, in radian.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's start angle, in radian.",
            "name": "startAngle"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's send angle, in radian.",
            "name": "endAngle"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The arc's stroke style.",
            "name": "strokeStyle"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc's line width.",
            "name": "strokeWidth"
          }
        ],
        "name": "arc",
        "longname": "Canvas#arc",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "$longname": "Canvas#arc"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "Canvas#cancelMoveTo",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#cancelMoveTo",
        "inherited": true,
        "$longname": "Canvas#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "Canvas#center",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#center",
        "inherited": true,
        "$longname": "Canvas#center"
      },
      {
        "comment": "/**\n     * Draws a circle\n     *\n     * @param {Number} x The circle's center x related to the Canvas'position.\n     * @param {Number} y The circle's center y related to the Canvas'position.\n     * @param {Number} radius The circle's radius in radian.\n     * @param {String} color The circle's color.\n     * @param {Number} strokeWidth The circle's line width.\n     * @param {String} strokeStyle The circle's strokeStyle.\n     */",
        "meta": {
          "range": [
            2959,
            3402
          ],
          "filename": "Paint.js",
          "lineno": 100,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004792",
            "name": "Canvas#circle",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "radius",
              "color",
              "strokeWidth",
              "strokeStyle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a circle",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The circle's center x related to the Canvas'position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The circle's center y related to the Canvas'position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The circle's radius in radian.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The circle's color.",
            "name": "color"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The circle's line width.",
            "name": "strokeWidth"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The circle's strokeStyle.",
            "name": "strokeStyle"
          }
        ],
        "name": "circle",
        "longname": "Canvas#circle",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "$longname": "Canvas#circle"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "Canvas#clearBehavior",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#clearBehavior",
        "inherited": true,
        "$longname": "Canvas#clearBehavior"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "Canvas#destroy",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#destroy",
        "inherited": true,
        "$longname": "Canvas#destroy"
      },
      {
        "comment": "/**\n     * Canvas's draw method that's called on every frame\n     *\n     * @param {RenderingContext} ctx The rendering context to use for drawing.\n     */",
        "meta": {
          "range": [
            1245,
            1522
          ],
          "filename": "Paint.js",
          "lineno": 39,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004653",
            "name": "Canvas#draw",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Canvas's draw method that's called on every frame",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The rendering context to use for drawing.",
            "name": "ctx"
          }
        ],
        "name": "draw",
        "longname": "Canvas#draw",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "$longname": "Canvas#draw"
      },
      {
        "comment": "/**\n     * Fills the Canvas with specified color\n     *\n     * @param {String} [color=this.color] The color to used for filling the canvas.\n     */",
        "meta": {
          "range": [
            1821,
            1958
          ],
          "filename": "Paint.js",
          "lineno": 69,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004714",
            "name": "Canvas#fill",
            "type": "MethodDefinition",
            "paramnames": [
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Fills the Canvas with specified color",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "this.color",
            "description": "The color to used for filling the canvas.",
            "name": "color"
          }
        ],
        "name": "fill",
        "longname": "Canvas#fill",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "$longname": "Canvas#fill"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "Canvas#getAngle",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getAngle",
        "inherited": true,
        "$longname": "Canvas#getAngle"
      },
      {
        "comment": "/**\n     * Returns the current height of the object: with some types of Drawables ({Sprite}),\n     * height can vary\n     *\n     * @returns {number} The current height of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            16008,
            16062
          ],
          "filename": "Drawable.js",
          "lineno": 590,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002825",
            "name": "Drawable#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current height of the object: with some types of Drawables ({Sprite}),\nheight can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current height of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "Canvas#getCurrentHeight",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentHeight",
        "inherited": true,
        "$longname": "Canvas#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the current width of the drawable: with some types of drawables ({Sprite}),\n     * width can vary\n     *\n     * @returns {number} The current width of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            15724,
            15776
          ],
          "filename": "Drawable.js",
          "lineno": 578,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002817",
            "name": "Drawable#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current width of the drawable: with some types of drawables ({Sprite}),\nwidth can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current width of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "Canvas#getCurrentWidth",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentWidth",
        "inherited": true,
        "$longname": "Canvas#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the object's hitbox.\n     *\n     * Some drawables (eg. {Sprite} may have different hitbox for different frames.\n     *\n     * @returns {Object} an object with x, y, x2, Y2 describing the hit box\n     */",
        "meta": {
          "range": [
            16294,
            16465
          ],
          "filename": "Drawable.js",
          "lineno": 601,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002833",
            "name": "Drawable#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the object's hitbox.\n\nSome drawables (eg. {Sprite} may have different hitbox for different frames.",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an object with x, y, x2, Y2 describing the hit box"
          }
        ],
        "name": "getHitBox",
        "longname": "Canvas#getHitBox",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getHitBox",
        "inherited": true,
        "$longname": "Canvas#getHitBox"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "Canvas#getOpacity",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getOpacity",
        "inherited": true,
        "$longname": "Canvas#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "Canvas#getSavedPosition",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getSavedPosition",
        "inherited": true,
        "$longname": "Canvas#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "Canvas#hide",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#hide",
        "inherited": true,
        "$longname": "Canvas#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "Canvas#hitTest",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#hitTest",
        "inherited": true,
        "$longname": "Canvas#hitTest"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "Canvas#moveTo",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#moveTo",
        "inherited": true,
        "$longname": "Canvas#moveTo"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "Canvas#notify",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#notify",
        "inherited": true,
        "$longname": "Canvas#notify"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "Canvas#onCollision",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#onCollision",
        "inherited": true,
        "$longname": "Canvas#onCollision"
      },
      {
        "comment": "/**\n     * onHit is called when the object collides with another object\n     *\n     * @param {Drawable} obj The object that collided.\n     *\n     * This function does nothing interesting: this should be extended if needed.\n     */",
        "meta": {
          "range": [
            21011,
            21146
          ],
          "filename": "Drawable.js",
          "lineno": 740,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003419",
            "name": "Drawable#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "onHit is called when the object collides with another object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object that collided.\n\nThis function does nothing interesting: this should be extended if needed.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "Canvas#onHit",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#onHit",
        "inherited": true,
        "$longname": "Canvas#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "Canvas#playSound",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#playSound",
        "inherited": true,
        "$longname": "Canvas#playSound"
      },
      {
        "comment": "/**\n     * Draws a rectangle\n     *\n     * @param {Number} x The rect's x related to the Canvas'x position.\n     * @param {Number} y The rect's y related to the Canvas'x position.\n     * @param {Number} width The width of the rectangle.\n     * @param {Number} height The height of the rectangle.\n     * @param {String} [color=this.color] The color of the rectangle.\n     */",
        "meta": {
          "range": [
            2342,
            2519
          ],
          "filename": "Paint.js",
          "lineno": 83,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004750",
            "name": "Canvas#rect",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "width",
              "height",
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a rectangle",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The rect's x related to the Canvas'x position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The rect's y related to the Canvas'x position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The width of the rectangle.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The height of the rectangle.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "this.color",
            "description": "The color of the rectangle.",
            "name": "color"
          }
        ],
        "name": "rect",
        "longname": "Canvas#rect",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "$longname": "Canvas#rect"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "Canvas#removeAllChildren",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#removeAllChildren",
        "inherited": true,
        "$longname": "Canvas#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "Canvas#removeChild",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#removeChild",
        "inherited": true,
        "$longname": "Canvas#removeChild"
      },
      {
        "comment": "/**\n     * Renders the Canvas.\n     *\n     * User should redefine this and put there needed drawing calls\n     */",
        "meta": {
          "range": [
            1646,
            1663
          ],
          "filename": "Paint.js",
          "lineno": 60,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004710",
            "name": "Canvas#render",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Renders the Canvas.\n\nUser should redefine this and put there needed drawing calls",
        "name": "render",
        "longname": "Canvas#render",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "$longname": "Canvas#render"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "Canvas#reset",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#reset",
        "inherited": true,
        "$longname": "Canvas#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "Canvas#restoreCtxAlpha",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#restoreCtxAlpha",
        "inherited": true,
        "$longname": "Canvas#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "Canvas#savePosition",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#savePosition",
        "inherited": true,
        "$longname": "Canvas#savePosition"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "Canvas#setAngle",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setAngle",
        "inherited": true,
        "$longname": "Canvas#setAngle"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "Canvas#setBehavior",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setBehavior",
        "inherited": true,
        "$longname": "Canvas#setBehavior"
      },
      {
        "comment": "/**\n     * Associates an image to the drawable.\n     *\n     * Some objects (eg. Sprite) need a source sheet image before being able to\n     * be rendered onto the display.\n     *\n     * @param {Image} image the image that this object needs to draw: redefine if needed\n     */",
        "meta": {
          "range": [
            26009,
            26033
          ],
          "filename": "Drawable.js",
          "lineno": 916,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003795",
            "name": "Drawable#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Associates an image to the drawable.\n\nSome objects (eg. Sprite) need a source sheet image before being able to\nbe rendered onto the display.",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "the image that this object needs to draw: redefine if needed",
            "name": "image"
          }
        ],
        "name": "setImage",
        "longname": "Canvas#setImage",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setImage",
        "inherited": true,
        "$longname": "Canvas#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "Canvas#setMap",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setMap",
        "inherited": true,
        "$longname": "Canvas#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "Canvas#setMask",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setMask",
        "inherited": true,
        "$longname": "Canvas#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "Canvas#setOpacity",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setOpacity",
        "inherited": true,
        "$longname": "Canvas#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "Canvas#setPath",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setPath",
        "inherited": true,
        "$longname": "Canvas#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "Canvas#setPlatform",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setPlatform",
        "inherited": true,
        "$longname": "Canvas#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "Canvas#setScale",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setScale",
        "inherited": true,
        "$longname": "Canvas#setScale"
      },
      {
        "comment": "/**\n     * Sets the scene of the object.\n     *\n     * @param {Scene} scene The scene of the object.\n     *\n     * @note you don't usually need to call this method as it's called when adding an object onto a scene.\n     */",
        "meta": {
          "range": [
            5516,
            5665
          ],
          "filename": "Drawable.js",
          "lineno": 191,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001943",
            "name": "Drawable#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the scene of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "The scene of the object.",
            "name": "scene"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called when adding an object onto a scene.",
            "value": "you don't usually need to call this method as it's called when adding an object onto a scene."
          }
        ],
        "name": "setScene",
        "longname": "Canvas#setScene",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#setScene",
        "inherited": true,
        "$longname": "Canvas#setScene"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "Canvas#show",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#show",
        "inherited": true,
        "$longname": "Canvas#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "Canvas#showHitBox",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#showHitBox",
        "inherited": true,
        "$longname": "Canvas#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "Canvas#showObjectBox",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#showObjectBox",
        "inherited": true,
        "$longname": "Canvas#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "Canvas#snapToMap",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#snapToMap",
        "inherited": true,
        "$longname": "Canvas#snapToMap"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "Canvas#stopAnimate",
        "kind": "function",
        "memberof": "Canvas",
        "scope": "instance",
        "inherits": "Drawable#stopAnimate",
        "inherited": true,
        "$longname": "Canvas#stopAnimate"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Canvas instance\n     *\n     * @param {String} name The name of the Canvas element.\n     * @param {Object} options\n     * @param {Number} [options.width] The width of the Canvas element.\n     * @param {Number} [options.height] The height of the Canvas element.\n     * @param {Number} [options.x] The horizontal position of the element.\n     * @param {Number} [options.y] The vertical position of the element.\n     * @param {String} [options.color] The color of the element. Can be changed by subsequent drawing method calls.\n     *\n     */",
      "meta": {
        "range": [
          819,
          1080
        ],
        "filename": "Paint.js",
        "lineno": 23,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100004592",
          "name": "Canvas",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Canvas instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the Canvas element.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The width of the Canvas element.",
          "name": "options.width"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The height of the Canvas element.",
          "name": "options.height"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The horizontal position of the element.",
          "name": "options.x"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The vertical position of the element.",
          "name": "options.y"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The color of the element. Can be changed by subsequent drawing method calls.",
          "name": "options.color"
        }
      ],
      "name": "Canvas",
      "longname": "Canvas",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Canvas"
    }
  },
  {
    "comment": "/**\n * `Drawable` is the base class for objects that can be rendered on the screen.\n *\n * A `Drawable` has properties like x, y, vx, vy, speed.\n * In order to be rendered, an object must be added onto the active scene/map.\n * It can also have an optional behavior which tells Athena how\n * to move an object at each frame.\n *\n */",
    "meta": {
      "range": [
        578,
        28581
      ],
      "filename": "Drawable.js",
      "lineno": 17,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100001390",
        "name": "Drawable",
        "type": "ClassDeclaration",
        "paramnames": [
          "type",
          "options"
        ]
      }
    },
    "classdesc": "`Drawable` is the base class for objects that can be rendered on the screen.\n\nA `Drawable` has properties like x, y, vx, vy, speed.\nIn order to be rendered, an object must be added onto the active scene/map.\nIt can also have an optional behavior which tells Athena how\nto move an object at each frame.",
    "name": "Drawable",
    "longname": "Drawable",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Drawable: this class should be extended before creating an instance",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The type of object: this describes the type of object",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The id of the object. The defaults is type + random timestamp.",
        "name": "options.objectId"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The type of collision to use for the object.",
        "name": "options.collideGroup"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Set to true if the object should be the master.",
        "name": "options.master"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "An invisible object isn't rendered onto the screen.",
        "name": "options.visible"
      }
    ],
    "$longname": "Drawable",
    "$members": [
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "Drawable#addChild",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#addChild"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "Drawable#addMoveHandler",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#addMoveHandler"
      },
      {
        "comment": "/**\n     * Performs an animation on the object using one of the defined {FX} effects\n     *\n     * Effects change the object size/position using an interpolation function.\n     *\n     * Athena has the following effects:\n     * - {Fade} performs a fade\n     * - {Mosaic} performs a SNES-like mosaic effect\n     * - {Rotate} performs a rotation on the object\n     *\n     * @param {String} fxName The name of the effect to use.\n     * @param {Object} options The options of the effect.\n     * @param {String} [options.easing=\"linear\"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.\n     *\n     * @returns {Promise} a promise that will be fullfilled when the effect has been completed\n     */",
        "meta": {
          "range": [
            22387,
            23190
          ],
          "filename": "Drawable.js",
          "lineno": 785,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003490",
            "name": "Drawable#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "fxName",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs an animation on the object using one of the defined {FX} effects\n\nEffects change the object size/position using an interpolation function.\n\nAthena has the following effects:\n- {Fade} performs a fade\n- {Mosaic} performs a SNES-like mosaic effect\n- {Rotate} performs a rotation on the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the effect to use.",
            "name": "fxName"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options of the effect.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.",
            "name": "options.easing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "a promise that will be fullfilled when the effect has been completed"
          }
        ],
        "name": "animate",
        "longname": "Drawable#animate",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#animate"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "Drawable#cancelMoveTo",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "Drawable#center",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#center"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "Drawable#clearBehavior",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#clearBehavior"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "Drawable#destroy",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#destroy"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "Drawable#getAngle",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getAngle"
      },
      {
        "comment": "/**\n     * Returns the current height of the object: with some types of Drawables ({Sprite}),\n     * height can vary\n     *\n     * @returns {number} The current height of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            16008,
            16062
          ],
          "filename": "Drawable.js",
          "lineno": 590,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002825",
            "name": "Drawable#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current height of the object: with some types of Drawables ({Sprite}),\nheight can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current height of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "Drawable#getCurrentHeight",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the current width of the drawable: with some types of drawables ({Sprite}),\n     * width can vary\n     *\n     * @returns {number} The current width of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            15724,
            15776
          ],
          "filename": "Drawable.js",
          "lineno": 578,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002817",
            "name": "Drawable#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current width of the drawable: with some types of drawables ({Sprite}),\nwidth can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current width of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "Drawable#getCurrentWidth",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the object's hitbox.\n     *\n     * Some drawables (eg. {Sprite} may have different hitbox for different frames.\n     *\n     * @returns {Object} an object with x, y, x2, Y2 describing the hit box\n     */",
        "meta": {
          "range": [
            16294,
            16465
          ],
          "filename": "Drawable.js",
          "lineno": 601,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002833",
            "name": "Drawable#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the object's hitbox.\n\nSome drawables (eg. {Sprite} may have different hitbox for different frames.",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an object with x, y, x2, Y2 describing the hit box"
          }
        ],
        "name": "getHitBox",
        "longname": "Drawable#getHitBox",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getHitBox"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "Drawable#getOpacity",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "Drawable#getSavedPosition",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "Drawable#hide",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "Drawable#hitTest",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#hitTest"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "Drawable#moveTo",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#moveTo"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "Drawable#notify",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#notify"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "Drawable#onCollision",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#onCollision"
      },
      {
        "comment": "/**\n     * onHit is called when the object collides with another object\n     *\n     * @param {Drawable} obj The object that collided.\n     *\n     * This function does nothing interesting: this should be extended if needed.\n     */",
        "meta": {
          "range": [
            21011,
            21146
          ],
          "filename": "Drawable.js",
          "lineno": 740,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003419",
            "name": "Drawable#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "onHit is called when the object collides with another object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object that collided.\n\nThis function does nothing interesting: this should be extended if needed.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "Drawable#onHit",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "Drawable#playSound",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#playSound"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "Drawable#removeAllChildren",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "Drawable#removeChild",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#removeChild"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "Drawable#reset",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "Drawable#restoreCtxAlpha",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "Drawable#savePosition",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#savePosition"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "Drawable#setAngle",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setAngle"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "Drawable#setBehavior",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setBehavior"
      },
      {
        "comment": "/**\n     * Associates an image to the drawable.\n     *\n     * Some objects (eg. Sprite) need a source sheet image before being able to\n     * be rendered onto the display.\n     *\n     * @param {Image} image the image that this object needs to draw: redefine if needed\n     */",
        "meta": {
          "range": [
            26009,
            26033
          ],
          "filename": "Drawable.js",
          "lineno": 916,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003795",
            "name": "Drawable#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Associates an image to the drawable.\n\nSome objects (eg. Sprite) need a source sheet image before being able to\nbe rendered onto the display.",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "the image that this object needs to draw: redefine if needed",
            "name": "image"
          }
        ],
        "name": "setImage",
        "longname": "Drawable#setImage",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "Drawable#setMap",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "Drawable#setMask",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "Drawable#setOpacity",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "Drawable#setPath",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "Drawable#setPlatform",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "Drawable#setScale",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setScale"
      },
      {
        "comment": "/**\n     * Sets the scene of the object.\n     *\n     * @param {Scene} scene The scene of the object.\n     *\n     * @note you don't usually need to call this method as it's called when adding an object onto a scene.\n     */",
        "meta": {
          "range": [
            5516,
            5665
          ],
          "filename": "Drawable.js",
          "lineno": 191,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001943",
            "name": "Drawable#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the scene of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "The scene of the object.",
            "name": "scene"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called when adding an object onto a scene.",
            "value": "you don't usually need to call this method as it's called when adding an object onto a scene."
          }
        ],
        "name": "setScene",
        "longname": "Drawable#setScene",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#setScene"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "Drawable#show",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "params": [],
        "$longname": "Drawable#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "Drawable#showHitBox",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "Drawable#showObjectBox",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "Drawable#snapToMap",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#snapToMap"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "Drawable#stopAnimate",
        "kind": "function",
        "memberof": "Drawable",
        "scope": "instance",
        "$longname": "Drawable#stopAnimate"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Drawable: this class should be extended before creating an instance\n     *\n     * @param {String} type The type of object: this describes the type of object\n     * @param {Object} options\n     * @param {String} [options.objectId] The id of the object. The defaults is type + random timestamp.\n     * @param {Number} [options.collideGroup=0] The type of collision to use for the object.\n     * @param {Boolean} [options.master=false] Set to true if the object should be the master.\n     * @param {Boolean} [options.visible=true] An invisible object isn't rendered onto the screen.\n     */",
      "meta": {
        "range": [
          1216,
          3526
        ],
        "filename": "Drawable.js",
        "lineno": 28,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100001393",
          "name": "Drawable",
          "type": "MethodDefinition",
          "paramnames": [
            "type",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Drawable: this class should be extended before creating an instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of object: this describes the type of object",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The id of the object. The defaults is type + random timestamp.",
          "name": "options.objectId"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The type of collision to use for the object.",
          "name": "options.collideGroup"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Set to true if the object should be the master.",
          "name": "options.master"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "An invisible object isn't rendered onto the screen.",
          "name": "options.visible"
        }
      ],
      "name": "Drawable",
      "longname": "Drawable",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Drawable"
    }
  },
  {
    "comment": "/**\n * The menu class allows to quickly add text menu to an Athena Scene\n *\n * Each menu entry is called menuItem and is a simple object with the following properties:\n * `{ text: 'menu text', selectable: true|false, active: true|false, visible: true|false }`\n *\n * @extends Drawable\n */",
    "meta": {
      "range": [
        363,
        4937
      ],
      "filename": "Menu.js",
      "lineno": 12,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100004172",
        "name": "Menu",
        "type": "ClassDeclaration",
        "paramnames": [
          "type",
          "options"
        ]
      }
    },
    "classdesc": "The menu class allows to quickly add text menu to an Athena Scene\n\nEach menu entry is called menuItem and is a simple object with the following properties:\n`{ text: 'menu text', selectable: true|false, active: true|false, visible: true|false }`",
    "augments": [
      "Drawable"
    ],
    "name": "Menu",
    "longname": "Menu",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Menu",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The type of object.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"Menu Title\"",
        "description": "The title of the menu.",
        "name": "options.title"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"black\"",
        "description": "The color of the menu.",
        "name": "options.color"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "defaultvalue": "[]",
        "description": "The menu items to add.",
        "name": "options.menuItems"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"red\"",
        "description": "The default color to use for the selected menu item.",
        "name": "options.selectedColor"
      }
    ],
    "$longname": "Menu",
    "$members": [
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "Menu#addChild",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#addChild",
        "inherited": true,
        "$longname": "Menu#addChild"
      },
      {
        "comment": "/**\n     * Adds a new menu item\n     *\n     * @param {Object} menu An hash describing the menu.\n     *\n     * The hash can have the following properties:\n     * { text: 'menu text', selectable: true|false, active: true|false, visible: true|false }\n     */",
        "meta": {
          "range": [
            2338,
            2719
          ],
          "filename": "Menu.js",
          "lineno": 80,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004289",
            "name": "Menu#addMenuItem",
            "type": "MethodDefinition",
            "paramnames": [
              "menu"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a new menu item",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An hash describing the menu.\n\nThe hash can have the following properties:\n{ text: 'menu text', selectable: true|false, active: true|false, visible: true|false }",
            "name": "menu"
          }
        ],
        "name": "addMenuItem",
        "longname": "Menu#addMenuItem",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "$longname": "Menu#addMenuItem"
      },
      {
        "comment": "/**\n     * Adds several menuItems in a row\n     *\n     * @param {Array<Object>} items The list of items to add\n     *\n     * @see {@link #Menu#addMenuItem|`Menu.addMenuItem()`}\n     */",
        "meta": {
          "range": [
            2914,
            3168
          ],
          "filename": "Menu.js",
          "lineno": 98,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004365",
            "name": "Menu#addMenuItems",
            "type": "MethodDefinition",
            "paramnames": [
              "items"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds several menuItems in a row",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "The list of items to add",
            "name": "items"
          }
        ],
        "see": [
          "{@link #Menu#addMenuItem|`Menu.addMenuItem()`}"
        ],
        "name": "addMenuItems",
        "longname": "Menu#addMenuItems",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "$longname": "Menu#addMenuItems"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "Menu#addMoveHandler",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#addMoveHandler",
        "inherited": true,
        "$longname": "Menu#addMoveHandler"
      },
      {
        "comment": "/**\n     * Performs an animation on the object using one of the defined {FX} effects\n     *\n     * Effects change the object size/position using an interpolation function.\n     *\n     * Athena has the following effects:\n     * - {Fade} performs a fade\n     * - {Mosaic} performs a SNES-like mosaic effect\n     * - {Rotate} performs a rotation on the object\n     *\n     * @param {String} fxName The name of the effect to use.\n     * @param {Object} options The options of the effect.\n     * @param {String} [options.easing=\"linear\"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.\n     *\n     * @returns {Promise} a promise that will be fullfilled when the effect has been completed\n     */",
        "meta": {
          "range": [
            22387,
            23190
          ],
          "filename": "Drawable.js",
          "lineno": 785,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003490",
            "name": "Drawable#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "fxName",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs an animation on the object using one of the defined {FX} effects\n\nEffects change the object size/position using an interpolation function.\n\nAthena has the following effects:\n- {Fade} performs a fade\n- {Mosaic} performs a SNES-like mosaic effect\n- {Rotate} performs a rotation on the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the effect to use.",
            "name": "fxName"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options of the effect.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.",
            "name": "options.easing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "a promise that will be fullfilled when the effect has been completed"
          }
        ],
        "name": "animate",
        "longname": "Menu#animate",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#animate",
        "inherited": true,
        "$longname": "Menu#animate"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "Menu#cancelMoveTo",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#cancelMoveTo",
        "inherited": true,
        "$longname": "Menu#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "Menu#center",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#center",
        "inherited": true,
        "$longname": "Menu#center"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "Menu#clearBehavior",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#clearBehavior",
        "inherited": true,
        "$longname": "Menu#clearBehavior"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "Menu#destroy",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#destroy",
        "inherited": true,
        "$longname": "Menu#destroy"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "Menu#getAngle",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getAngle",
        "inherited": true,
        "$longname": "Menu#getAngle"
      },
      {
        "comment": "/**\n     * Returns the current height of the object: with some types of Drawables ({Sprite}),\n     * height can vary\n     *\n     * @returns {number} The current height of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            16008,
            16062
          ],
          "filename": "Drawable.js",
          "lineno": 590,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002825",
            "name": "Drawable#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current height of the object: with some types of Drawables ({Sprite}),\nheight can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current height of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "Menu#getCurrentHeight",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentHeight",
        "inherited": true,
        "$longname": "Menu#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the current width of the drawable: with some types of drawables ({Sprite}),\n     * width can vary\n     *\n     * @returns {number} The current width of the object\n     *\n     * @related {Sprite}\n     */",
        "meta": {
          "range": [
            15724,
            15776
          ],
          "filename": "Drawable.js",
          "lineno": 578,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002817",
            "name": "Drawable#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current width of the drawable: with some types of drawables ({Sprite}),\nwidth can vary",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current width of the object"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Sprite}",
            "value": "{Sprite}"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "Menu#getCurrentWidth",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getCurrentWidth",
        "inherited": true,
        "$longname": "Menu#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the object's hitbox.\n     *\n     * Some drawables (eg. {Sprite} may have different hitbox for different frames.\n     *\n     * @returns {Object} an object with x, y, x2, Y2 describing the hit box\n     */",
        "meta": {
          "range": [
            16294,
            16465
          ],
          "filename": "Drawable.js",
          "lineno": 601,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002833",
            "name": "Drawable#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the object's hitbox.\n\nSome drawables (eg. {Sprite} may have different hitbox for different frames.",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an object with x, y, x2, Y2 describing the hit box"
          }
        ],
        "name": "getHitBox",
        "longname": "Menu#getHitBox",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getHitBox",
        "inherited": true,
        "$longname": "Menu#getHitBox"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "Menu#getOpacity",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getOpacity",
        "inherited": true,
        "$longname": "Menu#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "Menu#getSavedPosition",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getSavedPosition",
        "inherited": true,
        "$longname": "Menu#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "Menu#hide",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#hide",
        "inherited": true,
        "$longname": "Menu#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "Menu#hitTest",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#hitTest",
        "inherited": true,
        "$longname": "Menu#hitTest"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "Menu#moveTo",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#moveTo",
        "inherited": true,
        "$longname": "Menu#moveTo"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "Menu#notify",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#notify",
        "inherited": true,
        "$longname": "Menu#notify"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "Menu#onCollision",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#onCollision",
        "inherited": true,
        "$longname": "Menu#onCollision"
      },
      {
        "comment": "/**\n     * onHit is called when the object collides with another object\n     *\n     * @param {Drawable} obj The object that collided.\n     *\n     * This function does nothing interesting: this should be extended if needed.\n     */",
        "meta": {
          "range": [
            21011,
            21146
          ],
          "filename": "Drawable.js",
          "lineno": 740,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003419",
            "name": "Drawable#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "onHit is called when the object collides with another object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object that collided.\n\nThis function does nothing interesting: this should be extended if needed.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "Menu#onHit",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#onHit",
        "inherited": true,
        "$longname": "Menu#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "Menu#playSound",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#playSound",
        "inherited": true,
        "$longname": "Menu#playSound"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "Menu#removeAllChildren",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#removeAllChildren",
        "inherited": true,
        "$longname": "Menu#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "Menu#removeChild",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#removeChild",
        "inherited": true,
        "$longname": "Menu#removeChild"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "Menu#reset",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#reset",
        "inherited": true,
        "$longname": "Menu#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "Menu#restoreCtxAlpha",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#restoreCtxAlpha",
        "inherited": true,
        "$longname": "Menu#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "Menu#savePosition",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#savePosition",
        "inherited": true,
        "$longname": "Menu#savePosition"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "Menu#setAngle",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setAngle",
        "inherited": true,
        "$longname": "Menu#setAngle"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "Menu#setBehavior",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setBehavior",
        "inherited": true,
        "$longname": "Menu#setBehavior"
      },
      {
        "comment": "/**\n     * Associates an image to the drawable.\n     *\n     * Some objects (eg. Sprite) need a source sheet image before being able to\n     * be rendered onto the display.\n     *\n     * @param {Image} image the image that this object needs to draw: redefine if needed\n     */",
        "meta": {
          "range": [
            26009,
            26033
          ],
          "filename": "Drawable.js",
          "lineno": 916,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003795",
            "name": "Drawable#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Associates an image to the drawable.\n\nSome objects (eg. Sprite) need a source sheet image before being able to\nbe rendered onto the display.",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "the image that this object needs to draw: redefine if needed",
            "name": "image"
          }
        ],
        "name": "setImage",
        "longname": "Menu#setImage",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setImage",
        "inherited": true,
        "$longname": "Menu#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "Menu#setMap",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setMap",
        "inherited": true,
        "$longname": "Menu#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "Menu#setMask",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setMask",
        "inherited": true,
        "$longname": "Menu#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "Menu#setOpacity",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setOpacity",
        "inherited": true,
        "$longname": "Menu#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "Menu#setPath",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setPath",
        "inherited": true,
        "$longname": "Menu#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "Menu#setPlatform",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setPlatform",
        "inherited": true,
        "$longname": "Menu#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "Menu#setScale",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setScale",
        "inherited": true,
        "$longname": "Menu#setScale"
      },
      {
        "comment": "/**\n     * Sets the scene of the object.\n     *\n     * @param {Scene} scene The scene of the object.\n     *\n     * @note you don't usually need to call this method as it's called when adding an object onto a scene.\n     */",
        "meta": {
          "range": [
            5516,
            5665
          ],
          "filename": "Drawable.js",
          "lineno": 191,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001943",
            "name": "Drawable#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the scene of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "The scene of the object.",
            "name": "scene"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called when adding an object onto a scene.",
            "value": "you don't usually need to call this method as it's called when adding an object onto a scene."
          }
        ],
        "name": "setScene",
        "longname": "Menu#setScene",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#setScene",
        "inherited": true,
        "$longname": "Menu#setScene"
      },
      {
        "comment": "/**\n     * Updates the text of a menu item\n     *\n     * @param {Number} itemId The index of the item to modify.\n     * @param {String} text The new text.\n     *\n     */",
        "meta": {
          "range": [
            4163,
            4231
          ],
          "filename": "Menu.js",
          "lineno": 153,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100004474",
            "name": "Menu#setText",
            "type": "MethodDefinition",
            "paramnames": [
              "itemId",
              "text"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Updates the text of a menu item",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The index of the item to modify.",
            "name": "itemId"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The new text.",
            "name": "text"
          }
        ],
        "name": "setText",
        "longname": "Menu#setText",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "$longname": "Menu#setText"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "Menu#show",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#show",
        "inherited": true,
        "$longname": "Menu#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "Menu#showHitBox",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#showHitBox",
        "inherited": true,
        "$longname": "Menu#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "Menu#showObjectBox",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#showObjectBox",
        "inherited": true,
        "$longname": "Menu#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "Menu#snapToMap",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#snapToMap",
        "inherited": true,
        "$longname": "Menu#snapToMap"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "Menu#stopAnimate",
        "kind": "function",
        "memberof": "Menu",
        "scope": "instance",
        "inherits": "Drawable#stopAnimate",
        "inherited": true,
        "$longname": "Menu#stopAnimate"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Menu\n     *\n     * @param {String} type The type of object.\n     * @param {Object} options\n     * @param {String} [options.title=\"Menu Title\"] The title of the menu.\n     * @param {String} [options.color=\"black\"] The color of the menu.\n     * @param {Array} [options.menuItems=[]] The menu items to add.\n     * @param {String} [options.selectedColor=\"red\"] The default color to use for the selected menu item.\n     *\n     * @example\n     *\n     * let myMenu = new Menu('mainMenu', {\n     *   title: 'Gods JS',\n     *      color: 'white',\n     *      menuItems: [\n     *      {\n     *          text: '> Start Game',\n     *          selectable: true,\n     *          visible: true,\n     *          active: true\n     *      },\n     *      {\n     *          text: '> Cannot Select ;)',\n     *          selectable: true,\n     *          visible: true\n     *      }]\n     *    })\n     */",
      "meta": {
        "range": [
          1308,
          2072
        ],
        "filename": "Menu.js",
        "lineno": 42,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100004176",
          "name": "Menu",
          "type": "MethodDefinition",
          "paramnames": [
            "type",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Menu",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of object.",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"Menu Title\"",
          "description": "The title of the menu.",
          "name": "options.title"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"black\"",
          "description": "The color of the menu.",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The menu items to add.",
          "name": "options.menuItems"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"red\"",
          "description": "The default color to use for the selected menu item.",
          "name": "options.selectedColor"
        }
      ],
      "examples": [
        "let myMenu = new Menu('mainMenu', {\n  title: 'Gods JS',\n     color: 'white',\n     menuItems: [\n     {\n         text: '> Start Game',\n         selectable: true,\n         visible: true,\n         active: true\n     },\n     {\n         text: '> Cannot Select ;)',\n         selectable: true,\n         visible: true\n     }]\n   })"
      ],
      "name": "Menu",
      "longname": "Menu",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Menu"
    }
  },
  {
    "comment": "/**\n * Basic class for displaying text using Canvas\n *\n * @extends Drawable\n */",
    "meta": {
      "range": [
        155,
        7684
      ],
      "filename": "SimpleText.js",
      "lineno": 9,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100004990",
        "name": "SimpleText",
        "type": "ClassDeclaration",
        "paramnames": [
          "type",
          "options"
        ]
      }
    },
    "classdesc": "Basic class for displaying text using Canvas",
    "augments": [
      "Drawable"
    ],
    "name": "SimpleText",
    "longname": "SimpleText",
    "kind": "class",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The type of the graphic object",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The initial text. Can be changed later using SimpleText.setText().",
        "name": "options.text"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The width of the text.",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The height of the text.",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"Arial\"",
        "description": "The font to use to draw the text.",
        "name": "options.fontFace"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"normal\"",
        "description": "The style of the font.",
        "name": "options.fontStyle"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"18px\"",
        "description": "The size of the font.",
        "name": "options.fontSize"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"normal\"",
        "description": "The weight of the font.",
        "name": "options.fontWeight"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"center\"",
        "description": "How to align the text when rendered.",
        "name": "options.align"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "\"white\"",
        "description": "The color to use when rendering the text.",
        "name": "options.color"
      }
    ],
    "$longname": "SimpleText",
    "$members": [
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "SimpleText#addChild",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#addChild",
        "inherited": true,
        "$longname": "SimpleText#addChild"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "SimpleText#addMoveHandler",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#addMoveHandler",
        "inherited": true,
        "$longname": "SimpleText#addMoveHandler"
      },
      {
        "comment": "/**\n     * Performs an animation on the object using one of the defined {FX} effects\n     *\n     * Effects change the object size/position using an interpolation function.\n     *\n     * Athena has the following effects:\n     * - {Fade} performs a fade\n     * - {Mosaic} performs a SNES-like mosaic effect\n     * - {Rotate} performs a rotation on the object\n     *\n     * @param {String} fxName The name of the effect to use.\n     * @param {Object} options The options of the effect.\n     * @param {String} [options.easing=\"linear\"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.\n     *\n     * @returns {Promise} a promise that will be fullfilled when the effect has been completed\n     */",
        "meta": {
          "range": [
            22387,
            23190
          ],
          "filename": "Drawable.js",
          "lineno": 785,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003490",
            "name": "Drawable#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "fxName",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs an animation on the object using one of the defined {FX} effects\n\nEffects change the object size/position using an interpolation function.\n\nAthena has the following effects:\n- {Fade} performs a fade\n- {Mosaic} performs a SNES-like mosaic effect\n- {Rotate} performs a rotation on the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the effect to use.",
            "name": "fxName"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options of the effect.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.",
            "name": "options.easing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "a promise that will be fullfilled when the effect has been completed"
          }
        ],
        "name": "animate",
        "longname": "SimpleText#animate",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#animate",
        "inherited": true,
        "$longname": "SimpleText#animate"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "SimpleText#cancelMoveTo",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#cancelMoveTo",
        "inherited": true,
        "$longname": "SimpleText#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "SimpleText#center",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#center",
        "inherited": true,
        "$longname": "SimpleText#center"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "SimpleText#clearBehavior",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#clearBehavior",
        "inherited": true,
        "$longname": "SimpleText#clearBehavior"
      },
      {
        "comment": "/**\n     * Clears the buffer\n     */",
        "meta": {
          "range": [
            2411,
            2492
          ],
          "filename": "SimpleText.js",
          "lineno": 71,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005142",
            "name": "SimpleText#clearBuffer",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Clears the buffer",
        "name": "clearBuffer",
        "longname": "SimpleText#clearBuffer",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#clearBuffer"
      },
      {
        "comment": "/**\n     * Generates a new buffer that can hold current text\n     *\n     * @param {Display} display The display to get the buffer from.\n     */",
        "meta": {
          "range": [
            2045,
            2364
          ],
          "filename": "SimpleText.js",
          "lineno": 59,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005111",
            "name": "SimpleText#createBuffer",
            "type": "MethodDefinition",
            "paramnames": [
              "display"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Generates a new buffer that can hold current text",
        "params": [
          {
            "type": {
              "names": [
                "Display"
              ]
            },
            "description": "The display to get the buffer from.",
            "name": "display"
          }
        ],
        "name": "createBuffer",
        "longname": "SimpleText#createBuffer",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "$longname": "SimpleText#createBuffer"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "SimpleText#destroy",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#destroy",
        "inherited": true,
        "$longname": "SimpleText#destroy"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "SimpleText#getAngle",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getAngle",
        "inherited": true,
        "$longname": "SimpleText#getAngle"
      },
      {
        "comment": "/**\n     * Returns the height of the text object\n     *\n     * @returns {Number} The object's height\n     */",
        "meta": {
          "range": [
            5625,
            5683
          ],
          "filename": "SimpleText.js",
          "lineno": 211,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005455",
            "name": "SimpleText#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the height of the text object",
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The object's height"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "SimpleText#getCurrentHeight",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getCurrentHeight",
        "$longname": "SimpleText#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the horizontal offset of the text object\n     *\n     * @returns {Number} The object's horizontal offset\n     */",
        "meta": {
          "range": [
            5824,
            5880
          ],
          "filename": "SimpleText.js",
          "lineno": 220,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005463",
            "name": "SimpleText#getCurrentOffsetX",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the horizontal offset of the text object",
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The object's horizontal offset"
          }
        ],
        "name": "getCurrentOffsetX",
        "longname": "SimpleText#getCurrentOffsetX",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#getCurrentOffsetX"
      },
      {
        "comment": "/**\n     * Returns the vertical offset of the text object\n     *\n     * @returns {Number} The object's vertical offset\n     */",
        "meta": {
          "range": [
            6017,
            6073
          ],
          "filename": "SimpleText.js",
          "lineno": 229,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005471",
            "name": "SimpleText#getCurrentOffsetY",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the vertical offset of the text object",
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The object's vertical offset"
          }
        ],
        "name": "getCurrentOffsetY",
        "longname": "SimpleText#getCurrentOffsetY",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#getCurrentOffsetY"
      },
      {
        "comment": "/**\n     * Returns the width of the text object\n     *\n     * @returns {Number} The object's width\n     */",
        "meta": {
          "range": [
            5450,
            5506
          ],
          "filename": "SimpleText.js",
          "lineno": 202,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005447",
            "name": "SimpleText#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the width of the text object",
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The object's width"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "SimpleText#getCurrentWidth",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getCurrentWidth",
        "$longname": "SimpleText#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the hitbox of the text object\n     *\n     * @returns {Object} The new hitbox\n     */",
        "meta": {
          "range": [
            5203,
            5333
          ],
          "filename": "SimpleText.js",
          "lineno": 188,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005429",
            "name": "SimpleText#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the hitbox of the text object",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new hitbox"
          }
        ],
        "name": "getHitBox",
        "longname": "SimpleText#getHitBox",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getHitBox",
        "$longname": "SimpleText#getHitBox"
      },
      {
        "comment": "/**\n     * Gets the following text metrics:\n     *  - this.fakeLineHeight`\n     * - `this.fakeHeight`\n     * - `this.fakeWidth`\n     *\n     * This method also sets the canvas'width & height to fit these metrics\n     */",
        "meta": {
          "range": [
            3521,
            4119
          ],
          "filename": "SimpleText.js",
          "lineno": 124,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005238",
            "name": "SimpleText#getMetrics",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Gets the following text metrics:\n - this.fakeLineHeight`\n- `this.fakeHeight`\n- `this.fakeWidth`\n\nThis method also sets the canvas'width & height to fit these metrics",
        "name": "getMetrics",
        "longname": "SimpleText#getMetrics",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#getMetrics"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "SimpleText#getOpacity",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getOpacity",
        "inherited": true,
        "$longname": "SimpleText#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "SimpleText#getSavedPosition",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getSavedPosition",
        "inherited": true,
        "$longname": "SimpleText#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "SimpleText#hide",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#hide",
        "inherited": true,
        "$longname": "SimpleText#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "SimpleText#hitTest",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#hitTest",
        "inherited": true,
        "$longname": "SimpleText#hitTest"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "SimpleText#moveTo",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#moveTo",
        "inherited": true,
        "$longname": "SimpleText#moveTo"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "SimpleText#notify",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#notify",
        "inherited": true,
        "$longname": "SimpleText#notify"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "SimpleText#onCollision",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#onCollision",
        "inherited": true,
        "$longname": "SimpleText#onCollision"
      },
      {
        "comment": "/**\n     * Called when an object collides with the text Object\n     *\n     * @param {Drawable} obj The graphical object that collided.\n     */",
        "meta": {
          "range": [
            6226,
            6376
          ],
          "filename": "SimpleText.js",
          "lineno": 238,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005479",
            "name": "SimpleText#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Called when an object collides with the text Object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The graphical object that collided.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "SimpleText#onHit",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "overrides": "Drawable#onHit",
        "$longname": "SimpleText#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "SimpleText#playSound",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#playSound",
        "inherited": true,
        "$longname": "SimpleText#playSound"
      },
      {
        "comment": "/**\n     * Prepare render by getting text metrics and creating temp text buffer\n     */",
        "meta": {
          "range": [
            3026,
            3292
          ],
          "filename": "SimpleText.js",
          "lineno": 103,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005190",
            "name": "SimpleText#prepareRender",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Prepare render by getting text metrics and creating temp text buffer",
        "name": "prepareRender",
        "longname": "SimpleText#prepareRender",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#prepareRender"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "SimpleText#removeAllChildren",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#removeAllChildren",
        "inherited": true,
        "$longname": "SimpleText#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "SimpleText#removeChild",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#removeChild",
        "inherited": true,
        "$longname": "SimpleText#removeChild"
      },
      {
        "comment": "/**\n     * pre-renders text in a temp canvas\n     */",
        "meta": {
          "range": [
            4182,
            4373
          ],
          "filename": "SimpleText.js",
          "lineno": 144,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005336",
            "name": "SimpleText#renderText",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "pre-renders text in a temp canvas",
        "name": "renderText",
        "longname": "SimpleText#renderText",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "$longname": "SimpleText#renderText"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "SimpleText#reset",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#reset",
        "inherited": true,
        "$longname": "SimpleText#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "SimpleText#restoreCtxAlpha",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#restoreCtxAlpha",
        "inherited": true,
        "$longname": "SimpleText#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "SimpleText#savePosition",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#savePosition",
        "inherited": true,
        "$longname": "SimpleText#savePosition"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "SimpleText#setAngle",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setAngle",
        "inherited": true,
        "$longname": "SimpleText#setAngle"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "SimpleText#setBehavior",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setBehavior",
        "inherited": true,
        "$longname": "SimpleText#setBehavior"
      },
      {
        "comment": "/**\n     * Change the color of the object\n     *\n     * @param {String} color The new color to use, can be anything that is valid for the `color` *CSS* property.\n     */",
        "meta": {
          "range": [
            5011,
            5089
          ],
          "filename": "SimpleText.js",
          "lineno": 178,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005413",
            "name": "SimpleText#setColor",
            "type": "MethodDefinition",
            "paramnames": [
              "color"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the color of the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The new color to use, can be anything that is valid for the `color` *CSS* property.",
            "name": "color"
          }
        ],
        "name": "setColor",
        "longname": "SimpleText#setColor",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "$longname": "SimpleText#setColor"
      },
      {
        "comment": "/**\n     * Associates an image to the drawable.\n     *\n     * Some objects (eg. Sprite) need a source sheet image before being able to\n     * be rendered onto the display.\n     *\n     * @param {Image} image the image that this object needs to draw: redefine if needed\n     */",
        "meta": {
          "range": [
            26009,
            26033
          ],
          "filename": "Drawable.js",
          "lineno": 916,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003795",
            "name": "Drawable#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Associates an image to the drawable.\n\nSome objects (eg. Sprite) need a source sheet image before being able to\nbe rendered onto the display.",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "the image that this object needs to draw: redefine if needed",
            "name": "image"
          }
        ],
        "name": "setImage",
        "longname": "SimpleText#setImage",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setImage",
        "inherited": true,
        "$longname": "SimpleText#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "SimpleText#setMap",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setMap",
        "inherited": true,
        "$longname": "SimpleText#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "SimpleText#setMask",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setMask",
        "inherited": true,
        "$longname": "SimpleText#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "SimpleText#setOpacity",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setOpacity",
        "inherited": true,
        "$longname": "SimpleText#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "SimpleText#setPath",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setPath",
        "inherited": true,
        "$longname": "SimpleText#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "SimpleText#setPlatform",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setPlatform",
        "inherited": true,
        "$longname": "SimpleText#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "SimpleText#setScale",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#setScale",
        "inherited": true,
        "$longname": "SimpleText#setScale"
      },
      {
        "comment": "/**\n     * Overrides Drawable's setScene element: we need to have\n     * have a scene to be able to calculate metrics\n     *\n     * @param {*} scene\n     */",
        "meta": {
          "range": [
            4743,
            4831
          ],
          "filename": "SimpleText.js",
          "lineno": 167,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005394",
            "name": "SimpleText#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Overrides Drawable's setScene element: we need to have\nhave a scene to be able to calculate metrics",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "name": "scene"
          }
        ],
        "name": "setScene",
        "longname": "SimpleText#setScene",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "overrides": "Drawable#setScene",
        "$longname": "SimpleText#setScene"
      },
      {
        "comment": "/**\n     * Change the size of the object\n     *\n     * @param {Number} width The width of the object.\n     * @param {Number} height The height of the object.\n     */",
        "meta": {
          "range": [
            2750,
            2928
          ],
          "filename": "SimpleText.js",
          "lineno": 90,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005162",
            "name": "SimpleText#setSize",
            "type": "MethodDefinition",
            "paramnames": [
              "width",
              "height"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the size of the object",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The width of the object.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The height of the object.",
            "name": "height"
          }
        ],
        "name": "setSize",
        "longname": "SimpleText#setSize",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "$longname": "SimpleText#setSize"
      },
      {
        "comment": "/**\n     * Updates the text's object\n     *\n     * @param {String} text The new text of the SimpleText object.\n     */",
        "meta": {
          "range": [
            4502,
            4576
          ],
          "filename": "SimpleText.js",
          "lineno": 156,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005378",
            "name": "SimpleText#setText",
            "type": "MethodDefinition",
            "paramnames": [
              "text"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Updates the text's object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The new text of the SimpleText object.",
            "name": "text"
          }
        ],
        "name": "setText",
        "longname": "SimpleText#setText",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "$longname": "SimpleText#setText"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "SimpleText#show",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#show",
        "inherited": true,
        "$longname": "SimpleText#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "SimpleText#showHitBox",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#showHitBox",
        "inherited": true,
        "$longname": "SimpleText#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "SimpleText#showObjectBox",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#showObjectBox",
        "inherited": true,
        "$longname": "SimpleText#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "SimpleText#snapToMap",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#snapToMap",
        "inherited": true,
        "$longname": "SimpleText#snapToMap"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "SimpleText#stopAnimate",
        "kind": "function",
        "memberof": "SimpleText",
        "scope": "instance",
        "inherits": "Drawable#stopAnimate",
        "inherited": true,
        "$longname": "SimpleText#stopAnimate"
      }
    ],
    "$constructor": {
      "comment": "/**\n     *\n     * @param {String} type The type of the graphic object\n     * @param {Object} [options={}]\n     * @param {String} [options.text=undefined] The initial text. Can be changed later using SimpleText.setText().\n     * @param {Number} [options.width=0] The width of the text.\n     * @param {Number} [options.height=0] The height of the text.\n     * @param {String} [options.fontFace=\"Arial\"] The font to use to draw the text.\n     * @param {String} [options.fontStyle=\"normal\"] The style of the font.\n     * @param {String} [options.fontSize=\"18px\"] The size of the font.\n     * @param {String} [options.fontWeight=\"normal\"] The weight of the font.\n     * @param {String} [options.align=\"center\"] How to align the text when rendered.\n     * @param {String} [options.color=\"white\"] The color to use when rendering the text.\n     *\n     * @example\n     *\n     * let myText = new SimpleText({\n     *  text: 'hello',\n     *  fontFace: 'Verdana',\n     *  fontStyle: 'bold',\n     *  fontSize: '24px'\n     * })\n     */",
      "meta": {
        "range": [
          1220,
          1891
        ],
        "filename": "SimpleText.js",
        "lineno": 33,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100004994",
          "name": "SimpleText",
          "type": "MethodDefinition",
          "paramnames": [
            "type",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of the graphic object",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The initial text. Can be changed later using SimpleText.setText().",
          "name": "options.text"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The width of the text.",
          "name": "options.width"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The height of the text.",
          "name": "options.height"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"Arial\"",
          "description": "The font to use to draw the text.",
          "name": "options.fontFace"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"normal\"",
          "description": "The style of the font.",
          "name": "options.fontStyle"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"18px\"",
          "description": "The size of the font.",
          "name": "options.fontSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"normal\"",
          "description": "The weight of the font.",
          "name": "options.fontWeight"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"center\"",
          "description": "How to align the text when rendered.",
          "name": "options.align"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"white\"",
          "description": "The color to use when rendering the text.",
          "name": "options.color"
        }
      ],
      "examples": [
        "let myText = new SimpleText({\n text: 'hello',\n fontFace: 'Verdana',\n fontStyle: 'bold',\n fontSize: '24px'\n})"
      ],
      "name": "SimpleText",
      "longname": "SimpleText",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "SimpleText"
    }
  },
  {
    "comment": "/**\n * This class extends {Drawable} to implement 2D sprites using an image sprite sheet.\n *\n * A sprite can have an infinite number of animations.\n * Each animation can have a different frameDuration and any number of frames.\n * Each frame may have a different size and a different hitbox\n *\n * @note Since games usually have multiple sprites of the same type, it's common to extend the Sprite class\n * to generate each sprite type with its own properties and then use these sprites instead of instanciating\n * the Sprite class.\n *\n *\n * @extends Drawable\n */",
    "meta": {
      "range": [
        708,
        26744
      ],
      "filename": "Sprite.js",
      "lineno": 20,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100005723",
        "name": "Sprite",
        "type": "ClassDeclaration",
        "paramnames": [
          "type",
          "options"
        ]
      }
    },
    "classdesc": "This class extends {Drawable} to implement 2D sprites using an image sprite sheet.\n\nA sprite can have an infinite number of animations.\nEach animation can have a different frameDuration and any number of frames.\nEach frame may have a different size and a different hitbox",
    "tags": [
      {
        "originalTitle": "note",
        "title": "note",
        "text": "Since games usually have multiple sprites of the same type, it's common to extend the Sprite class\nto generate each sprite type with its own properties and then use these sprites instead of instanciating\nthe Sprite class.",
        "value": "Since games usually have multiple sprites of the same type, it's common to extend the Sprite class\nto generate each sprite type with its own properties and then use these sprites instead of instanciating\nthe Sprite class."
      }
    ],
    "augments": [
      "Drawable"
    ],
    "name": "Sprite",
    "longname": "Sprite",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "An identifier for this sprite, can be for example `enemy1`,...",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "An options hash for the object.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The id to the spritesheet image to use.",
        "name": "options.imageId"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A map with a key for each animation of the sprite.",
        "name": "options.animations"
      }
    ],
    "$longname": "Sprite",
    "$members": [
      {
        "comment": "/**\n     * Adds a new animation to the sprite\n     *\n     * @param {String} name The name of the new animation.\n     * @param {String} id The id of the resource (image) to use for the animation.\n     * @param {Object} [options={}] The animation to add, see:\n     * @param {number} [options.offsetX=0] The x offset of the sprite frames inside the image.\n     * @param {number} [options.offsetY=0] The y offset of the sprite frames inside the image.\n     * @param {number} [options.frameWidth] The width of a frame.\n     * @param {number} [options.frameHeight=imageHeight] The height of a frame. By default frameHeight is taken from image.naturalHeight.\n     * @param {number} [options.frameDuration=1] The duration of a frame (1 = 16ms).\n     * @param {number} [options.frameSpacing=0] The space between each frame.\n     * @param {number} [options.loop=1] 0 = anim play once and stops at the end, 1 = anim loops to frame 1 at the end, 2 = anim will play in reverse when reaching the end, then plays again, etc.\n     * @returns {Deferred} a deferred object that's resolved once the animation is ready.\n     * @example\n     * // creates a new animation from the image run.png\n     * mySprite.addAnimation ('running', 'run.png', {\n     *    frameWidth: 32\n     * })\n     */",
        "meta": {
          "range": [
            5000,
            6514
          ],
          "filename": "Sprite.js",
          "lineno": 152,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005884",
            "name": "Sprite#addAnimation",
            "type": "MethodDefinition",
            "paramnames": [
              "name",
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a new animation to the sprite",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the new animation.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the resource (image) to use for the animation.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The animation to add, see:",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The x offset of the sprite frames inside the image.",
            "name": "options.offsetX"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The y offset of the sprite frames inside the image.",
            "name": "options.offsetY"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The width of a frame.",
            "name": "options.frameWidth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "imageHeight",
            "description": "The height of a frame. By default frameHeight is taken from image.naturalHeight.",
            "name": "options.frameHeight"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The duration of a frame (1 = 16ms).",
            "name": "options.frameDuration"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The space between each frame.",
            "name": "options.frameSpacing"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "0 = anim play once and stops at the end, 1 = anim loops to frame 1 at the end, 2 = anim will play in reverse when reaching the end, then plays again, etc.",
            "name": "options.loop"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a deferred object that's resolved once the animation is ready."
          }
        ],
        "examples": [
          "// creates a new animation from the image run.png\nmySprite.addAnimation ('running', 'run.png', {\n   frameWidth: 32\n})"
        ],
        "name": "addAnimation",
        "longname": "Sprite#addAnimation",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#addAnimation"
      },
      {
        "comment": "/**\n     * Add a new Child to the object.\n     *\n     * Childs are automatically rendered and moved when the parent object is.\n     *\n     * @param {Drawable} child The child to add.\n     *\n     * @note children are automatically added to the scene/map of the parent object.\n     */",
        "meta": {
          "range": [
            24941,
            25082
          ],
          "filename": "Drawable.js",
          "lineno": 875,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003691",
            "name": "Drawable#addChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new Child to the object.\n\nChilds are automatically rendered and moved when the parent object is.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to add.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "children are automatically added to the scene/map of the parent object.",
            "value": "children are automatically added to the scene/map of the parent object."
          }
        ],
        "name": "addChild",
        "longname": "Sprite#addChild",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#addChild",
        "inherited": true,
        "$longname": "Sprite#addChild"
      },
      {
        "comment": "/**\n     * Add a new handler to be called after each move of the object\n     *\n     * @param {Function} cb The callback to add.\n     */",
        "meta": {
          "range": [
            20708,
            20770
          ],
          "filename": "Drawable.js",
          "lineno": 729,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003406",
            "name": "Drawable#addMoveHandler",
            "type": "MethodDefinition",
            "paramnames": [
              "cb"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a new handler to be called after each move of the object",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to add.",
            "name": "cb"
          }
        ],
        "name": "addMoveHandler",
        "longname": "Sprite#addMoveHandler",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#addMoveHandler",
        "inherited": true,
        "$longname": "Sprite#addMoveHandler"
      },
      {
        "comment": "/**\n     * advanceFrame is called at each render loop and waits for currentAnim.frameDuration\n     * before advancing to the next animation frame.\n     *\n     * @param {String} animName The name to advance.\n     *\n     * If animName != currentAnimName then switches to the new animation\n     */",
        "meta": {
          "range": [
            13160,
            13569
          ],
          "filename": "Sprite.js",
          "lineno": 389,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006622",
            "name": "Sprite#advanceFrame",
            "type": "MethodDefinition",
            "paramnames": [
              "animName"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "advanceFrame is called at each render loop and waits for currentAnim.frameDuration\nbefore advancing to the next animation frame.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name to advance.\n\nIf animName != currentAnimName then switches to the new animation",
            "name": "animName"
          }
        ],
        "name": "advanceFrame",
        "longname": "Sprite#advanceFrame",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#advanceFrame"
      },
      {
        "comment": "/**\n     * Performs an animation on the object using one of the defined {FX} effects\n     *\n     * Effects change the object size/position using an interpolation function.\n     *\n     * Athena has the following effects:\n     * - {Fade} performs a fade\n     * - {Mosaic} performs a SNES-like mosaic effect\n     * - {Rotate} performs a rotation on the object\n     *\n     * @param {String} fxName The name of the effect to use.\n     * @param {Object} options The options of the effect.\n     * @param {String} [options.easing=\"linear\"] The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.\n     *\n     * @returns {Promise} a promise that will be fullfilled when the effect has been completed\n     */",
        "meta": {
          "range": [
            22387,
            23190
          ],
          "filename": "Drawable.js",
          "lineno": 785,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003490",
            "name": "Drawable#animate",
            "type": "MethodDefinition",
            "paramnames": [
              "fxName",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs an animation on the object using one of the defined {FX} effects\n\nEffects change the object size/position using an interpolation function.\n\nAthena has the following effects:\n- {Fade} performs a fade\n- {Mosaic} performs a SNES-like mosaic effect\n- {Rotate} performs a rotation on the object",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the effect to use.",
            "name": "fxName"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options of the effect.",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "The easing functions to use, can be: 'linear', 'swing', 'easeInQuad', 'easeOutBounce'.",
            "name": "options.easing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "a promise that will be fullfilled when the effect has been completed"
          }
        ],
        "name": "animate",
        "longname": "Sprite#animate",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#animate",
        "inherited": true,
        "$longname": "Sprite#animate"
      },
      {
        "comment": "/**\n     * Stops the object from moving, optionnaly immediately going to target position\n     *\n     * @param {Boolean} [gotoTarget=false] Set to true to go to the target position.\n     */",
        "meta": {
          "range": [
            8766,
            8998
          ],
          "filename": "Drawable.js",
          "lineno": 305,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002243",
            "name": "Drawable#cancelMoveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "gotoTarget"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops the object from moving, optionnaly immediately going to target position",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to go to the target position.",
            "name": "gotoTarget"
          }
        ],
        "name": "cancelMoveTo",
        "longname": "Sprite#cancelMoveTo",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#cancelMoveTo",
        "inherited": true,
        "$longname": "Sprite#cancelMoveTo"
      },
      {
        "comment": "/**\n     * Centers the object into the scene.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            9101,
            9292
          ],
          "filename": "Drawable.js",
          "lineno": 320,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002280",
            "name": "Drawable#center",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the object into the scene.",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "center",
        "longname": "Sprite#center",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#center",
        "inherited": true,
        "$longname": "Sprite#center"
      },
      {
        "comment": "/**\n     * Centers the sprite horizontaly around a tile\n     *\n     * @param {Object} tilePos The tile to center the sprite on.\n     */",
        "meta": {
          "range": [
            16063,
            16439
          ],
          "filename": "Sprite.js",
          "lineno": 501,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006822",
            "name": "Sprite#centerXOverTile",
            "type": "MethodDefinition",
            "paramnames": [
              "tilePos"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Centers the sprite horizontaly around a tile",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The tile to center the sprite on.",
            "name": "tilePos"
          }
        ],
        "name": "centerXOverTile",
        "longname": "Sprite#centerXOverTile",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#centerXOverTile"
      },
      {
        "comment": "/**\n     * Stop using a particular behavior.\n     *\n     * The vx and vy properties of the object will be set to zero.\n     */",
        "meta": {
          "range": [
            10033,
            10117
          ],
          "filename": "Drawable.js",
          "lineno": 349,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002359",
            "name": "Drawable#clearBehavior",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stop using a particular behavior.\n\nThe vx and vy properties of the object will be set to zero.",
        "name": "clearBehavior",
        "longname": "Sprite#clearBehavior",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#clearBehavior",
        "inherited": true,
        "$longname": "Sprite#clearBehavior"
      },
      {
        "comment": "/**\n     * Stops current animation from running\n     *\n     * TODO: rename this method\n     */",
        "meta": {
          "range": [
            16544,
            16623
          ],
          "filename": "Sprite.js",
          "lineno": 517,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006869",
            "name": "Sprite#clearMove",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current animation from running\n\nTODO: rename this method",
        "name": "clearMove",
        "longname": "Sprite#clearMove",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#clearMove"
      },
      {
        "comment": "/**\n     * Destroy is called when an object is removed from a scene or object\n     *\n     * @note calling destroy on a parent will automatically call the destroy method of each child.\n     */",
        "meta": {
          "range": [
            28061,
            28579
          ],
          "filename": "Drawable.js",
          "lineno": 982,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003963",
            "name": "Drawable#destroy",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Destroy is called when an object is removed from a scene or object",
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "calling destroy on a parent will automatically call the destroy method of each child.",
            "value": "calling destroy on a parent will automatically call the destroy method of each child."
          }
        ],
        "name": "destroy",
        "longname": "Sprite#destroy",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#destroy",
        "inherited": true,
        "$longname": "Sprite#destroy"
      },
      {
        "comment": "/**\n     * Returns the angle property of the object.\n     */",
        "meta": {
          "range": [
            14278,
            14323
          ],
          "filename": "Drawable.js",
          "lineno": 508,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002734",
            "name": "Drawable#getAngle",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the angle property of the object.",
        "name": "getAngle",
        "longname": "Sprite#getAngle",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getAngle",
        "inherited": true,
        "$longname": "Sprite#getAngle"
      },
      {
        "comment": "/**\n     * @returns {Number} the height of current animation frame\n     */",
        "meta": {
          "range": [
            13849,
            13955
          ],
          "filename": "Sprite.js",
          "lineno": 415,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006692",
            "name": "Sprite#getCurrentHeight",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the height of current animation frame"
          }
        ],
        "name": "getCurrentHeight",
        "longname": "Sprite#getCurrentHeight",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getCurrentHeight",
        "$longname": "Sprite#getCurrentHeight"
      },
      {
        "comment": "/**\n     * Returns the x offset in the spritesheet of current animation frame\n     *\n     * @returns {number} current frame horizontal offset in the spritesheet\n     */",
        "meta": {
          "range": [
            14134,
            14203
          ],
          "filename": "Sprite.js",
          "lineno": 425,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006702",
            "name": "Sprite#getCurrentOffsetX",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the x offset in the spritesheet of current animation frame",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "current frame horizontal offset in the spritesheet"
          }
        ],
        "name": "getCurrentOffsetX",
        "longname": "Sprite#getCurrentOffsetX",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#getCurrentOffsetX"
      },
      {
        "comment": "/**\n     * Returns the y offset in the spritesheet of current animation frame\n     *\n     * @returns {number} current frame vertical offset in the spritesheet\n     */",
        "meta": {
          "range": [
            14380,
            14449
          ],
          "filename": "Sprite.js",
          "lineno": 434,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006712",
            "name": "Sprite#getCurrentOffsetY",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the y offset in the spritesheet of current animation frame",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "current frame vertical offset in the spritesheet"
          }
        ],
        "name": "getCurrentOffsetY",
        "longname": "Sprite#getCurrentOffsetY",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#getCurrentOffsetY"
      },
      {
        "comment": "/**\n     * @returns {Number} The width of current animation frame\n     *\n     */",
        "meta": {
          "range": [
            13660,
            13764
          ],
          "filename": "Sprite.js",
          "lineno": 407,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006682",
            "name": "Sprite#getCurrentWidth",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The width of current animation frame"
          }
        ],
        "name": "getCurrentWidth",
        "longname": "Sprite#getCurrentWidth",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getCurrentWidth",
        "$longname": "Sprite#getCurrentWidth"
      },
      {
        "comment": "/**\n     * Returns the hitBox of current animation frame\n     *\n     * @returns {Object} the hitbox\n     *\n     * @example\n     *\n     * { x: 0, y: 0, x2: 10, y2: 10 }\n     */",
        "meta": {
          "range": [
            15361,
            15560
          ],
          "filename": "Sprite.js",
          "lineno": 471,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006746",
            "name": "Sprite#getHitBox",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the hitBox of current animation frame",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "the hitbox"
          }
        ],
        "examples": [
          "{ x: 0, y: 0, x2: 10, y2: 10 }"
        ],
        "name": "getHitBox",
        "longname": "Sprite#getHitBox",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "overrides": "Drawable#getHitBox",
        "$longname": "Sprite#getHitBox"
      },
      {
        "comment": "/**\n     * Returns hitbox position\n     *\n     * @returns {Object} the hitbox position using current sprite position\n     */",
        "meta": {
          "range": [
            15695,
            15917
          ],
          "filename": "Sprite.js",
          "lineno": 485,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006776",
            "name": "Sprite#getHitBox2",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns hitbox position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "the hitbox position using current sprite position"
          }
        ],
        "name": "getHitBox2",
        "longname": "Sprite#getHitBox2",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#getHitBox2"
      },
      {
        "comment": "/**\n     * Returns the current opacity of the object\n     *\n     * @returns {number} The current opacity value.\n     */",
        "meta": {
          "range": [
            8518,
            8567
          ],
          "filename": "Drawable.js",
          "lineno": 296,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002235",
            "name": "Drawable#getOpacity",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns the current opacity of the object",
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current opacity value."
          }
        ],
        "name": "getOpacity",
        "longname": "Sprite#getOpacity",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getOpacity",
        "inherited": true,
        "$longname": "Sprite#getOpacity"
      },
      {
        "comment": "/**\n     * Returns previously seved position\n     *\n     * @returns {Object} The saved position\n     */",
        "meta": {
          "range": [
            13162,
            13271
          ],
          "filename": "Drawable.js",
          "lineno": 455,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002683",
            "name": "Drawable#getSavedPosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Returns previously seved position",
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The saved position"
          }
        ],
        "name": "getSavedPosition",
        "longname": "Sprite#getSavedPosition",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#getSavedPosition",
        "inherited": true,
        "$longname": "Sprite#getSavedPosition"
      },
      {
        "comment": "/**\n     * Hides the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14653,
            14719
          ],
          "filename": "Drawable.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002759",
            "name": "Drawable#hide",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Hides the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "hide",
        "longname": "Sprite#hide",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#hide",
        "inherited": true,
        "$longname": "Sprite#hide"
      },
      {
        "comment": "/**\n     * Performs collision tests on the specifed object.\n     *\n     * @param {Drawable} obj The object to perform test on\n     *\n     * @returns {Boolean} Returns true if this and obj collide\n     */",
        "meta": {
          "range": [
            19023,
            20296
          ],
          "filename": "Drawable.js",
          "lineno": 676,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003151",
            "name": "Drawable#hitTest",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Performs collision tests on the specifed object.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The object to perform test on",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Returns true if this and obj collide"
          }
        ],
        "name": "hitTest",
        "longname": "Sprite#hitTest",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#hitTest",
        "inherited": true,
        "$longname": "Sprite#hitTest"
      },
      {
        "comment": "/**\n     * Init default sprite properties\n     */",
        "meta": {
          "range": [
            2732,
            3467
          ],
          "filename": "Sprite.js",
          "lineno": 88,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100005769",
            "name": "Sprite#initProperties",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Init default sprite properties",
        "name": "initProperties",
        "longname": "Sprite#initProperties",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#initProperties"
      },
      {
        "comment": "/**\n     * Loads animations from settings, flipping sprites if needed\n     * and sets the last animation of the array as current animation\n     *\n     * @param {Object} [anims] The animations map to load.\n     */",
        "meta": {
          "range": [
            6737,
            7523
          ],
          "filename": "Sprite.js",
          "lineno": 213,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006044",
            "name": "Sprite#load",
            "type": "MethodDefinition",
            "paramnames": [
              "anims"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Loads animations from settings, flipping sprites if needed\nand sets the last animation of the array as current animation",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "The animations map to load.",
            "name": "anims"
          }
        ],
        "name": "load",
        "longname": "Sprite#load",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#load"
      },
      {
        "comment": "/**\n     * Moves the object to a new destination.\n     *\n     * @param {number} x The new horizontal position.\n     * @param {number} y The new vertical position.\n     * @param {number} [duration=0] The duration of the move, 0 to have the object move immediately to new position.\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            6272,
            6991
          ],
          "filename": "Drawable.js",
          "lineno": 217,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001981",
            "name": "Drawable#moveTo",
            "type": "MethodDefinition",
            "paramnames": [
              "x",
              "y",
              "duration"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object to a new destination.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new horizontal position.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new vertical position.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The duration of the move, 0 to have the object move immediately to new position.",
            "name": "duration"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "moveTo",
        "longname": "Sprite#moveTo",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#moveTo",
        "inherited": true,
        "$longname": "Sprite#moveTo"
      },
      {
        "comment": "/**\n     * Goes to the next animation frame\n     *\n     * When reaching the last frame, the next frame will depend on animation.loop property:\n     *\n     * - if loop == 2 then animation will play back in reverse mode, up to the first frame\n     * - if loop == 1 then animation will play back from the begining so nextFrame = 0\n     * - if loop == 0/undefined then animation will stop and sprite._onAnimateEnd is called\n     */",
        "meta": {
          "range": [
            10638,
            12425
          ],
          "filename": "Sprite.js",
          "lineno": 321,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006409",
            "name": "Sprite#nextFrame",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Goes to the next animation frame\n\nWhen reaching the last frame, the next frame will depend on animation.loop property:\n\n- if loop == 2 then animation will play back in reverse mode, up to the first frame\n- if loop == 1 then animation will play back from the begining so nextFrame = 0\n- if loop == 0/undefined then animation will stop and sprite._onAnimateEnd is called",
        "name": "nextFrame",
        "longname": "Sprite#nextFrame",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#nextFrame"
      },
      {
        "comment": "/**\n     * Sends a notification to listeners\n     *\n     * @note: this is a simple wrapper to the NotificationManageger's notify method\n     *\n     * @param {String} id name of the event to send\n     * @param {Object} data data to send with the event, default = empty object\n     */",
        "meta": {
          "range": [
            27703,
            27779
          ],
          "filename": "Drawable.js",
          "lineno": 971,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003941",
            "name": "Drawable#notify",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sends a notification to listeners",
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "this is a simple wrapper to the NotificationManageger's notify method",
            "value": "this is a simple wrapper to the NotificationManageger's notify method"
          }
        ],
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "name of the event to send",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "data to send with the event, default = empty object",
            "name": "data"
          }
        ],
        "name": "notify",
        "longname": "Sprite#notify",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#notify",
        "inherited": true,
        "$longname": "Sprite#notify"
      },
      {
        "comment": "/**\n     * Adds a new function that will be called when a new animation is ran\n     *\n     * @param {Function} func The callback function to add.\n     */",
        "meta": {
          "range": [
            19579,
            19668
          ],
          "filename": "Sprite.js",
          "lineno": 613,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100007108",
            "name": "Sprite#onAnimationChange",
            "type": "MethodDefinition",
            "paramnames": [
              "func"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a new function that will be called when a new animation is ran",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback function to add.",
            "name": "func"
          }
        ],
        "name": "onAnimationChange",
        "longname": "Sprite#onAnimationChange",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#onAnimationChange"
      },
      {
        "comment": "/**\n     * Adds a new function that will be called when current animation ends\n     *\n     * @param {Function} func The callback to execute.\n     */",
        "meta": {
          "range": [
            19270,
            19415
          ],
          "filename": "Sprite.js",
          "lineno": 603,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100007089",
            "name": "Sprite#onAnimationEnd",
            "type": "MethodDefinition",
            "paramnames": [
              "func"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds a new function that will be called when current animation ends",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback to execute.",
            "name": "func"
          }
        ],
        "name": "onAnimationEnd",
        "longname": "Sprite#onAnimationEnd",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#onAnimationEnd"
      },
      {
        "comment": "/**\n     * onCollision is called on each collision with the object.\n     *\n     * This method does nothing and should be extended if needed.\n     *\n     */",
        "meta": {
          "range": [
            24626,
            24648
          ],
          "filename": "Drawable.js",
          "lineno": 862,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003687",
            "name": "Drawable#onCollision",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "onCollision is called on each collision with the object.\n\nThis method does nothing and should be extended if needed.",
        "name": "onCollision",
        "longname": "Sprite#onCollision",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#onCollision",
        "inherited": true,
        "$longname": "Sprite#onCollision"
      },
      {
        "comment": "/**\n     * onHit is called when a collision has been detect between the sprite and another graphical object\n     *\n     * @param {Drawable} obj The graphical object that collided.\n     */",
        "meta": {
          "range": [
            20473,
            20632
          ],
          "filename": "Sprite.js",
          "lineno": 644,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100007159",
            "name": "Sprite#onHit",
            "type": "MethodDefinition",
            "paramnames": [
              "obj"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "onHit is called when a collision has been detect between the sprite and another graphical object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The graphical object that collided.",
            "name": "obj"
          }
        ],
        "name": "onHit",
        "longname": "Sprite#onHit",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "overrides": "Drawable#onHit",
        "$longname": "Sprite#onHit"
      },
      {
        "comment": "/**\n     * Plays the spcified sound\n     *\n     * @param {String} id The id of the sound to play.\n     * @param {Object} options\n     * @param {Boolean} [options.pan=true] Set pan to true if you want to use panning.\n     * @param {Boolean} [options.loop=false] Set to true to loop the sound.\n     */",
        "meta": {
          "range": [
            26724,
            27410
          ],
          "filename": "Drawable.js",
          "lineno": 941,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003823",
            "name": "Drawable#playSound",
            "type": "MethodDefinition",
            "paramnames": [
              "id",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the spcified sound",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the sound to play.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "name": "options"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Set pan to true if you want to use panning.",
            "name": "options.pan"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Set to true to loop the sound.",
            "name": "options.loop"
          }
        ],
        "name": "playSound",
        "longname": "Sprite#playSound",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#playSound",
        "inherited": true,
        "$longname": "Sprite#playSound"
      },
      {
        "comment": "/**\n     * Remove every children from the object.\n     */",
        "meta": {
          "range": [
            25555,
            25723
          ],
          "filename": "Drawable.js",
          "lineno": 901,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003759",
            "name": "Drawable#removeAllChildren",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove every children from the object.",
        "name": "removeAllChildren",
        "longname": "Sprite#removeAllChildren",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#removeAllChildren",
        "inherited": true,
        "$longname": "Sprite#removeAllChildren"
      },
      {
        "comment": "/**\n     * Remove a child from the object\n     *\n     * @param {Drawable} child The child to remove from the object.\n     *\n     * @note: removing a child object will call its `destroy` method.\n     */",
        "meta": {
          "range": [
            25294,
            25487
          ],
          "filename": "Drawable.js",
          "lineno": 889,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003720",
            "name": "Drawable#removeChild",
            "type": "MethodDefinition",
            "paramnames": [
              "child"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Remove a child from the object",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The child to remove from the object.",
            "name": "child"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "removing a child object will call its `destroy` method.",
            "value": "removing a child object will call its `destroy` method."
          }
        ],
        "name": "removeChild",
        "longname": "Sprite#removeChild",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#removeChild",
        "inherited": true,
        "$longname": "Sprite#removeChild"
      },
      {
        "comment": "/**\n     * User customized reset method\n     */",
        "meta": {
          "range": [
            3584,
            3600
          ],
          "filename": "Drawable.js",
          "lineno": 119,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001682",
            "name": "Drawable#reset",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "User customized reset method",
        "name": "reset",
        "longname": "Sprite#reset",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#reset",
        "inherited": true,
        "$longname": "Sprite#reset"
      },
      {
        "comment": "/**\n     * Restores the previous context globalAlpha property.\n     *\n     * @param {RenderingContext} ctx The context.\n     */",
        "meta": {
          "range": [
            15423,
            15493
          ],
          "filename": "Drawable.js",
          "lineno": 566,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002804",
            "name": "Drawable#restoreCtxAlpha",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Restores the previous context globalAlpha property.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context.",
            "name": "ctx"
          }
        ],
        "name": "restoreCtxAlpha",
        "longname": "Sprite#restoreCtxAlpha",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#restoreCtxAlpha",
        "inherited": true,
        "$longname": "Sprite#restoreCtxAlpha"
      },
      {
        "comment": "/**\n     * Restore animation to a previous saved state\n     *\n     * @related {storeCurrentAnim}\n     */",
        "meta": {
          "range": [
            12751,
            12855
          ],
          "filename": "Sprite.js",
          "lineno": 377,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006606",
            "name": "Sprite#restorePreviousAnim",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Restore animation to a previous saved state",
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{storeCurrentAnim}",
            "value": "{storeCurrentAnim}"
          }
        ],
        "name": "restorePreviousAnim",
        "longname": "Sprite#restorePreviousAnim",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#restorePreviousAnim"
      },
      {
        "comment": "/**\n     * Plays the animation from the end up to the first frame\n     */",
        "meta": {
          "range": [
            9950,
            10200
          ],
          "filename": "Sprite.js",
          "lineno": 304,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006361",
            "name": "Sprite#rewind",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Plays the animation from the end up to the first frame",
        "name": "rewind",
        "longname": "Sprite#rewind",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#rewind"
      },
      {
        "comment": "/**\n     * Saves current object position into `savedX` and `savedY` properties\n     */",
        "meta": {
          "range": [
            12966,
            13048
          ],
          "filename": "Drawable.js",
          "lineno": 445,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002663",
            "name": "Drawable#savePosition",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Saves current object position into `savedX` and `savedY` properties",
        "name": "savePosition",
        "longname": "Sprite#savePosition",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#savePosition",
        "inherited": true,
        "$longname": "Sprite#savePosition"
      },
      {
        "comment": "/**\n     * Change the angle of an object\n     *\n     * @param {number} angle The new angle of the object. 0 < angle < 360.\n     *\n     * @note This property is only used for the rendering and it's ignored for collisions.\n     */",
        "meta": {
          "range": [
            14109,
            14207
          ],
          "filename": "Drawable.js",
          "lineno": 500,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002723",
            "name": "Drawable#setAngle",
            "type": "MethodDefinition",
            "paramnames": [
              "angle"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the angle of an object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new angle of the object. 0 < angle < 360.",
            "name": "angle"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "This property is only used for the rendering and it's ignored for collisions.",
            "value": "This property is only used for the rendering and it's ignored for collisions."
          }
        ],
        "name": "setAngle",
        "longname": "Sprite#setAngle",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setAngle",
        "inherited": true,
        "$longname": "Sprite#setAngle"
      },
      {
        "comment": "/**\n     * Changes the sprite's current animation\n     *\n     * @param {String} anim The new animation to play.\n     * @param {Function} [fn=undefined] An optionnal callback to run when the animation will have ended.\n     * @param {number} [frameNum=0] The first frame to play, defaults to zero.\n     * @param {Boolean} [revert=false] Whether to start playing the animation from the last frame.\n     */",
        "meta": {
          "range": [
            17036,
            18473
          ],
          "filename": "Sprite.js",
          "lineno": 530,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006879",
            "name": "Sprite#setAnimation",
            "type": "MethodDefinition",
            "paramnames": [
              "anim",
              "fn",
              "frameNum",
              "revert"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the sprite's current animation",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The new animation to play.",
            "name": "anim"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "An optionnal callback to run when the animation will have ended.",
            "name": "fn"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The first frame to play, defaults to zero.",
            "name": "frameNum"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Whether to start playing the animation from the last frame.",
            "name": "revert"
          }
        ],
        "name": "setAnimation",
        "longname": "Sprite#setAnimation",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#setAnimation"
      },
      {
        "comment": "/**\n     * Sets a new behavior to the object: this will be called in the move loop\n     *\n     * @param {(String|Behavior)} behavior Either the name of a standard behavior or a Behavior class to use.\n     * @param {Object} [options={}] The options of the behavior (may depend on the behavior type).\n     *\n     * @related {Behavior}\n     */",
        "meta": {
          "range": [
            9643,
            9896
          ],
          "filename": "Drawable.js",
          "lineno": 336,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002322",
            "name": "Drawable#setBehavior",
            "type": "MethodDefinition",
            "paramnames": [
              "behavior",
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new behavior to the object: this will be called in the move loop",
        "params": [
          {
            "type": {
              "names": [
                "String",
                "Behavior"
              ]
            },
            "description": "Either the name of a standard behavior or a Behavior class to use.",
            "name": "behavior"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "The options of the behavior (may depend on the behavior type).",
            "name": "options"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Behavior}",
            "value": "{Behavior}"
          }
        ],
        "name": "setBehavior",
        "longname": "Sprite#setBehavior",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setBehavior",
        "inherited": true,
        "$longname": "Sprite#setBehavior"
      },
      {
        "comment": "/**\n     * Changes the source image for this sprite\n     *\n     * @param {Image} image the new Image to use as spritesheet.\n     * @param {Boolean} [force=false] will replace current image with a new one if force == false.\n     */",
        "meta": {
          "range": [
            9345,
            9866
          ],
          "filename": "Sprite.js",
          "lineno": 281,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006304",
            "name": "Sprite#setImage",
            "type": "MethodDefinition",
            "paramnames": [
              "image",
              "force"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the source image for this sprite",
        "params": [
          {
            "type": {
              "names": [
                "Image"
              ]
            },
            "description": "the new Image to use as spritesheet.",
            "name": "image"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "will replace current image with a new one if force == false.",
            "name": "force"
          }
        ],
        "name": "setImage",
        "longname": "Sprite#setImage",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "overrides": "Drawable#setImage",
        "$longname": "Sprite#setImage"
      },
      {
        "comment": "/**\n     * Sets the map of the object.\n     *\n     * @param {Map} map The map of the object.\n     *\n     * @note you don't usually need to call this method as it's called automatically when adding an object\n     * onto a map.\n     *\n     */",
        "meta": {
          "range": [
            5146,
            5283
          ],
          "filename": "Drawable.js",
          "lineno": 176,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001916",
            "name": "Drawable#setMap",
            "type": "MethodDefinition",
            "paramnames": [
              "map"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the map of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Map"
              ]
            },
            "description": "The map of the object.",
            "name": "map"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map.",
            "value": "you don't usually need to call this method as it's called automatically when adding an object\nonto a map."
          }
        ],
        "name": "setMap",
        "longname": "Sprite#setMap",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setMap",
        "inherited": true,
        "$longname": "Sprite#setMap"
      },
      {
        "comment": "/**\n     * Applies a new mask to the object, clipping its drawing onto the scene/map\n     *\n     * @param {Object} mask The new mask to use, set to null to remove the mask.\n     * @param {Boolean} exclude Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.\n     */",
        "meta": {
          "range": [
            8066,
            8211
          ],
          "filename": "Drawable.js",
          "lineno": 275,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002197",
            "name": "Drawable#setMask",
            "type": "MethodDefinition",
            "paramnames": [
              "mask",
              "exclude"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Applies a new mask to the object, clipping its drawing onto the scene/map",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The new mask to use, set to null to remove the mask.",
            "name": "mask",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to true to have the mask exclude portions of the drawing, in this case mask.color will be used.",
            "name": "exclude",
            "defaultvalue": false
          }
        ],
        "name": "setMask",
        "longname": "Sprite#setMask",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setMask",
        "inherited": true,
        "$longname": "Sprite#setMask"
      },
      {
        "comment": "/**\n     * Changes the opacity of the object\n     *\n     * @param {number} opacity The new opacity.\n     */",
        "meta": {
          "range": [
            8329,
            8388
          ],
          "filename": "Drawable.js",
          "lineno": 287,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002224",
            "name": "Drawable#setOpacity",
            "type": "MethodDefinition",
            "paramnames": [
              "opacity"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Changes the opacity of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new opacity.",
            "name": "opacity"
          }
        ],
        "name": "setOpacity",
        "longname": "Sprite#setOpacity",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setOpacity",
        "inherited": true,
        "$longname": "Sprite#setOpacity"
      },
      {
        "comment": "/**\n     * Sets a new path for the object\n     *\n     * @param {Path} path The new path that the object will use when moving.\n     *\n     * @related {Path}\n     */",
        "meta": {
          "range": [
            13547,
            13594
          ],
          "filename": "Drawable.js",
          "lineno": 478,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002701",
            "name": "Drawable#setPath",
            "type": "MethodDefinition",
            "paramnames": [
              "path"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets a new path for the object",
        "params": [
          {
            "type": {
              "names": [
                "Path"
              ]
            },
            "description": "The new path that the object will use when moving.",
            "name": "path"
          }
        ],
        "tags": [
          {
            "originalTitle": "related",
            "title": "related",
            "text": "{Path}",
            "value": "{Path}"
          }
        ],
        "name": "setPath",
        "longname": "Sprite#setPath",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setPath",
        "inherited": true,
        "$longname": "Sprite#setPath"
      },
      {
        "comment": "/**\n     * WIP Sets the platform of the object. This will be used when platforms will be fully implemented.\n     *\n     * @param {Drawable} platform The platform the object is attached to.\n     */",
        "meta": {
          "range": [
            5872,
            5935
          ],
          "filename": "Drawable.js",
          "lineno": 204,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001970",
            "name": "Drawable#setPlatform",
            "type": "MethodDefinition",
            "paramnames": [
              "platform"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP Sets the platform of the object. This will be used when platforms will be fully implemented.",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The platform the object is attached to.",
            "name": "platform"
          }
        ],
        "name": "setPlatform",
        "longname": "Sprite#setPlatform",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setPlatform",
        "inherited": true,
        "$longname": "Sprite#setPlatform"
      },
      {
        "comment": "/**\n     * Change the scale of the object\n     *\n     * @param {number} scale The new scale of the object.\n     *\n     * @note: it's only used when rendering, collision detection is not using the scale yet.\n     */",
        "meta": {
          "range": [
            13819,
            13870
          ],
          "filename": "Drawable.js",
          "lineno": 489,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002712",
            "name": "Drawable#setScale",
            "type": "MethodDefinition",
            "paramnames": [
              "scale"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Change the scale of the object",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new scale of the object.",
            "name": "scale"
          }
        ],
        "tags": [
          {
            "originalTitle": "note:",
            "title": "note:",
            "text": "it's only used when rendering, collision detection is not using the scale yet.",
            "value": "it's only used when rendering, collision detection is not using the scale yet."
          }
        ],
        "name": "setScale",
        "longname": "Sprite#setScale",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setScale",
        "inherited": true,
        "$longname": "Sprite#setScale"
      },
      {
        "comment": "/**\n     * Sets the scene of the object.\n     *\n     * @param {Scene} scene The scene of the object.\n     *\n     * @note you don't usually need to call this method as it's called when adding an object onto a scene.\n     */",
        "meta": {
          "range": [
            5516,
            5665
          ],
          "filename": "Drawable.js",
          "lineno": 191,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100001943",
            "name": "Drawable#setScene",
            "type": "MethodDefinition",
            "paramnames": [
              "scene"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Sets the scene of the object.",
        "params": [
          {
            "type": {
              "names": [
                "Scene"
              ]
            },
            "description": "The scene of the object.",
            "name": "scene"
          }
        ],
        "tags": [
          {
            "originalTitle": "note",
            "title": "note",
            "text": "you don't usually need to call this method as it's called when adding an object onto a scene.",
            "value": "you don't usually need to call this method as it's called when adding an object onto a scene."
          }
        ],
        "name": "setScene",
        "longname": "Sprite#setScene",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#setScene",
        "inherited": true,
        "$longname": "Sprite#setScene"
      },
      {
        "comment": "/**\n     * Show the object\n     *\n     * @returns {Drawable} this\n     */",
        "meta": {
          "range": [
            14803,
            14868
          ],
          "filename": "Drawable.js",
          "lineno": 541,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002771",
            "name": "Drawable#show",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Show the object",
        "returns": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "this"
          }
        ],
        "name": "show",
        "longname": "Sprite#show",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "inherits": "Drawable#show",
        "inherited": true,
        "$longname": "Sprite#show"
      },
      {
        "comment": "/**\n     * Draws the sprite hit box\n     *\n     * @param {RenderingContext} The canvas context where to render the hitbox.\n     */",
        "meta": {
          "range": [
            16606,
            18119
          ],
          "filename": "Drawable.js",
          "lineno": 615,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002857",
            "name": "Drawable#showHitBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws the sprite hit box",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "canvas context where to render the hitbox.",
            "name": "The"
          }
        ],
        "name": "showHitBox",
        "longname": "Sprite#showHitBox",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#showHitBox",
        "inherited": true,
        "$longname": "Sprite#showHitBox"
      },
      {
        "comment": "/**\n       * Draws a box around objects. This method is called when debugging is enabled.\n       *\n       * @param {RenderingContext} ctx The context where to draw the box.\n       */",
        "meta": {
          "range": [
            18312,
            18686
          ],
          "filename": "Drawable.js",
          "lineno": 654,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003054",
            "name": "Drawable#showObjectBox",
            "type": "MethodDefinition",
            "paramnames": [
              "ctx"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Draws a box around objects. This method is called when debugging is enabled.",
        "params": [
          {
            "type": {
              "names": [
                "RenderingContext"
              ]
            },
            "description": "The context where to draw the box.",
            "name": "ctx"
          }
        ],
        "name": "showObjectBox",
        "longname": "Sprite#showObjectBox",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#showObjectBox",
        "inherited": true,
        "$longname": "Sprite#showObjectBox"
      },
      {
        "comment": "/**\n     * Moves the object by snapping it to the map tiles\n     *\n     * @param {Boolean} isLeft Should we snap to the left?\n     * @param {Boolean} isUp Should we snap to the right?\n     */",
        "meta": {
          "range": [
            7193,
            7743
          ],
          "filename": "Drawable.js",
          "lineno": 248,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100002106",
            "name": "Drawable#snapToMap",
            "type": "MethodDefinition",
            "paramnames": [
              "isLeft",
              "isUp"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Moves the object by snapping it to the map tiles",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the left?",
            "name": "isLeft"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Should we snap to the right?",
            "name": "isUp"
          }
        ],
        "name": "snapToMap",
        "longname": "Sprite#snapToMap",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#snapToMap",
        "inherited": true,
        "$longname": "Sprite#snapToMap"
      },
      {
        "comment": "/**\n     * Starts/resumes animation playback\n     *\n     * This method only sets `this.running` to true.\n     */",
        "meta": {
          "range": [
            19058,
            19111
          ],
          "filename": "Sprite.js",
          "lineno": 594,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100007079",
            "name": "Sprite#startAnimation",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Starts/resumes animation playback\n\nThis method only sets `this.running` to true.",
        "name": "startAnimation",
        "longname": "Sprite#startAnimation",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#startAnimation"
      },
      {
        "comment": "/**\n     * Stops current running animation\n     *\n     * In some cases, the game may need to stop effects from running before\n     * they are completed. This method proves a way to do so and set an end value.\n     *\n     * @param {any} setEndValue The end value of the animation.\n     */",
        "meta": {
          "range": [
            23488,
            23820
          ],
          "filename": "Drawable.js",
          "lineno": 819,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100003608",
            "name": "Drawable#stopAnimate",
            "type": "MethodDefinition",
            "paramnames": [
              "setEndValue"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops current running animation\n\nIn some cases, the game may need to stop effects from running before\nthey are completed. This method proves a way to do so and set an end value.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The end value of the animation.",
            "name": "setEndValue"
          }
        ],
        "name": "stopAnimate",
        "longname": "Sprite#stopAnimate",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "inherits": "Drawable#stopAnimate",
        "inherited": true,
        "$longname": "Sprite#stopAnimate"
      },
      {
        "comment": "/**\n     * Stops playing current animation\n     *\n     * @param {Boolean} runPreviousEndMethod Set to false if you don't want to run the end callback functions.\n     */",
        "meta": {
          "range": [
            18652,
            18935
          ],
          "filename": "Sprite.js",
          "lineno": 579,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100007053",
            "name": "Sprite#stopAnimation",
            "type": "MethodDefinition",
            "paramnames": [
              "runPreviousEndMethod"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stops playing current animation",
        "params": [
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "description": "Set to false if you don't want to run the end callback functions.",
            "name": "runPreviousEndMethod"
          }
        ],
        "name": "stopAnimation",
        "longname": "Sprite#stopAnimation",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#stopAnimation"
      },
      {
        "comment": "/**\n     * Save current animation name and frame for later use\n     */",
        "meta": {
          "range": [
            12506,
            12636
          ],
          "filename": "Sprite.js",
          "lineno": 367,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006586",
            "name": "Sprite#storeCurrentAnim",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Save current animation name and frame for later use",
        "name": "storeCurrentAnim",
        "longname": "Sprite#storeCurrentAnim",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "params": [],
        "$longname": "Sprite#storeCurrentAnim"
      },
      {
        "comment": "/**\n     * WIP: updateFlipAnimation\n     *\n     * It's possible to define a new animation that is simply the flip of another one\n     * This method copies the frames of the source animation and flips them\n     *\n     * @param {Object} anim The animation to create frames for.\n     * @param {String} flipFrom The name of the animation to use as reference.\n     * @param {Number} flipType The direction of the flip: set to 1 for left/right flip, 2 for top/bottom flip.\n     *\n     */",
        "meta": {
          "range": [
            8015,
            9104
          ],
          "filename": "Sprite.js",
          "lineno": 252,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100006137",
            "name": "Sprite#updateFlipAnimation",
            "type": "MethodDefinition",
            "paramnames": [
              "anim",
              "flipFrom",
              "flipType"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "WIP: updateFlipAnimation\n\nIt's possible to define a new animation that is simply the flip of another one\nThis method copies the frames of the source animation and flips them",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The animation to create frames for.",
            "name": "anim"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the animation to use as reference.",
            "name": "flipFrom"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The direction of the flip: set to 1 for left/right flip, 2 for top/bottom flip.",
            "name": "flipType"
          }
        ],
        "name": "updateFlipAnimation",
        "longname": "Sprite#updateFlipAnimation",
        "kind": "function",
        "memberof": "Sprite",
        "scope": "instance",
        "$longname": "Sprite#updateFlipAnimation"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Sprite\n     *\n     * @param {String} type An identifier for this sprite, can be for example `enemy1`,...\n     * @param {Object} options An options hash for the object.\n     * @param {String} options.imageId The id to the spritesheet image to use.\n     * @param {Object} options.animations A map with a key for each animation of the sprite.\n     *\n     * @see {@link #Drawable|Drawable} for additionnal parameters\n     * @example\n     *\n     * let mySprite = new Sprite('gem', {\n     *  imageId: 'objects',\n     *  x: options.x,\n     *  y: options.y,\n     *  pool: options.pool,\n     *  canCollide: true,\n     *  collideGroup: 1,\n     *  animations: {\n     *      mainLoop: {\n     *          frameDuration: 4,\n     *          frames:[{\n     *              offsetX: 136,\n     *              offsetY: 189,\n     *              width: 31,\n     *              height: 31,\n     *              hitBox: {\n     *                  x: 0,\n     *                  y: 0,\n     *                  x2: 31,\n     *                  y2: 31\n     *              },\n     *              plane: 0\n     *          },\n     *               {\n     *              offsetX: 170,\n     *              offsetY: 189,\n     *              width: 31,\n     *              height: 31,\n     *              hitBox: {\n     *                  x: 0,\n     *                  y: 0,\n     *                  x2: 31,\n     *                  y2: 31\n     *              },\n     *              plane: 0\n     *          }],\n     *           loop: 1\n     *       }\n     *    }\n     * });\n     */",
      "meta": {
        "range": [
          2313,
          2672
        ],
        "filename": "Sprite.js",
        "lineno": 73,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100005727",
          "name": "Sprite",
          "type": "MethodDefinition",
          "paramnames": [
            "type",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Sprite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "An identifier for this sprite, can be for example `enemy1`,...",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "An options hash for the object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The id to the spritesheet image to use.",
          "name": "options.imageId"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "A map with a key for each animation of the sprite.",
          "name": "options.animations"
        }
      ],
      "see": [
        "{@link #Drawable|Drawable} for additionnal parameters"
      ],
      "examples": [
        "let mySprite = new Sprite('gem', {\n imageId: 'objects',\n x: options.x,\n y: options.y,\n pool: options.pool,\n canCollide: true,\n collideGroup: 1,\n animations: {\n     mainLoop: {\n         frameDuration: 4,\n         frames:[{\n             offsetX: 136,\n             offsetY: 189,\n             width: 31,\n             height: 31,\n             hitBox: {\n                 x: 0,\n                 y: 0,\n                 x2: 31,\n                 y2: 31\n             },\n             plane: 0\n         },\n              {\n             offsetX: 170,\n             offsetY: 189,\n             width: 31,\n             height: 31,\n             hitBox: {\n                 x: 0,\n                 y: 0,\n                 x2: 31,\n                 y2: 31\n             },\n             plane: 0\n         }],\n          loop: 1\n      }\n   }\n});"
      ],
      "name": "Sprite",
      "longname": "Sprite",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Sprite"
    }
  },
  {
    "comment": "/**\n * This class allows to handle wave of Drawables.\n *\n * In AthenaJS, waves of enemies can be triggered by certain action onto the map.\n *\n * Once every enemies of a wave have been destroyed, an action can be triggered,\n * for eg. to drop rewards onto the map.\n */",
    "meta": {
      "range": [
        315,
        2631
      ],
      "filename": "Wave.js",
      "lineno": 11,
      "columnno": 0,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
      "code": {
        "id": "astnode100008090",
        "name": "Wave",
        "type": "ClassDeclaration",
        "paramnames": [
          "options"
        ]
      }
    },
    "classdesc": "This class allows to handle wave of Drawables.\n\nIn AthenaJS, waves of enemies can be triggered by certain action onto the map.\n\nOnce every enemies of a wave have been destroyed, an action can be triggered,\nfor eg. to drop rewards onto the map.",
    "name": "Wave",
    "longname": "Wave",
    "kind": "class",
    "scope": "global",
    "description": "Creates a new Wave",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "The size of the Wave.",
        "name": "options.size"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The type of wave, ie. what will happen after the wave have been destroyed.",
        "name": "options.type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The data needed for the `type` trigger.",
        "name": "options.afterDestroyData"
      }
    ],
    "$longname": "Wave",
    "$members": [
      {
        "comment": "/**\n     * Called when the last element of a wave have been destroyed.\n     *\n     * This destroys the wave itself, triggering an option event\n     *\n     * @param {Drawable} element The last Drawable that was destroyed and triggered the wave destroy.\n     */",
        "meta": {
          "range": [
            2144,
            2629
          ],
          "filename": "Wave.js",
          "lineno": 71,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100008208",
            "name": "Wave#destroy",
            "type": "MethodDefinition",
            "paramnames": [
              "element"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Called when the last element of a wave have been destroyed.\n\nThis destroys the wave itself, triggering an option event",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The last Drawable that was destroyed and triggered the wave destroy.",
            "name": "element"
          }
        ],
        "name": "destroy",
        "longname": "Wave#destroy",
        "kind": "function",
        "memberof": "Wave",
        "scope": "instance",
        "$longname": "Wave#destroy"
      },
      {
        "comment": "/**\n     * Generates the sprite's drawable options, because some parameters, like position\n     * may depend on the wave element's positions\n     *\n     * @param {Drawable} element The element to use as a base\n     *\n     * @returns {Object} The options to pass to the drawable constructor\n     */",
        "meta": {
          "range": [
            1526,
            1874
          ],
          "filename": "Wave.js",
          "lineno": 50,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100008144",
            "name": "Wave#getSpriteOptions",
            "type": "MethodDefinition",
            "paramnames": [
              "element"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Generates the sprite's drawable options, because some parameters, like position\nmay depend on the wave element's positions",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The element to use as a base",
            "name": "element"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The options to pass to the drawable constructor"
          }
        ],
        "name": "getSpriteOptions",
        "longname": "Wave#getSpriteOptions",
        "kind": "function",
        "memberof": "Wave",
        "scope": "instance",
        "$longname": "Wave#getSpriteOptions"
      },
      {
        "comment": "/**\n     * Removes an element from the wave.\n     *\n     * This method gets called once the drawable's `destroy` method is called\n     *\n     * @param {Drawable} element The element that was removed.\n     */",
        "meta": {
          "range": [
            1096,
            1218
          ],
          "filename": "Wave.js",
          "lineno": 34,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
          "code": {
            "id": "astnode100008122",
            "name": "Wave#remove",
            "type": "MethodDefinition",
            "paramnames": [
              "element"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Removes an element from the wave.\n\nThis method gets called once the drawable's `destroy` method is called",
        "params": [
          {
            "type": {
              "names": [
                "Drawable"
              ]
            },
            "description": "The element that was removed.",
            "name": "element"
          }
        ],
        "name": "remove",
        "longname": "Wave#remove",
        "kind": "function",
        "memberof": "Wave",
        "scope": "instance",
        "$longname": "Wave#remove"
      }
    ],
    "$constructor": {
      "comment": "/**\n     * Creates a new Wave\n     *\n     * @param {Object} options\n     * @param {Number} options.size The size of the Wave.\n     * @param {String} options.type The type of wave, ie. what will happen after the wave have been destroyed.\n     * @param {Object} options.afterDestroyData The data needed for the `type` trigger.\n     */",
      "meta": {
        "range": [
          669,
          878
        ],
        "filename": "Wave.js",
        "lineno": 20,
        "columnno": 4,
        "path": "e:\\Docs\\Dev\\athenajs\\js\\Drawable",
        "code": {
          "id": "astnode100008093",
          "name": "Wave",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Wave",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The size of the Wave.",
          "name": "options.size"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of wave, ie. what will happen after the wave have been destroyed.",
          "name": "options.type"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The data needed for the `type` trigger.",
          "name": "options.afterDestroyData"
        }
      ],
      "name": "Wave",
      "longname": "Wave",
      "kind": "class",
      "scope": "global",
      "undocumented": true,
      "$longname": "Wave"
    }
  }
]