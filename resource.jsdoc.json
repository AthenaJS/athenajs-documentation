[
  {
    "comment": "/**\n * Handles resource loading at runtime\n *\n * Resources are loaded and retrieved using this manager.\n *\n * The ResourceManager can load at runtime the following types of resources:\n *  - Images\n *  - Sounds\n *  - Maps (JSON-based)\n *\n */",
    "meta": {
      "range": [
        874,
        21501
      ],
      "filename": "ResourceManager.js",
      "lineno": 28,
      "columnno": 6,
      "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
      "code": {
        "id": "astnode100000058",
        "name": "ResourceManager",
        "type": "ObjectExpression",
        "value": "{\"isLocal\":\"\",\"scriptMaxTime\":3000,\"groupMaxTime\":5000,\"resources\":\"\",\"dynamicScripts\":\"\",\"iOS\":\"\",\"skipResources\":\"\",\"async\":true,\"loading\":false,\"getResourceById\":\"\",\"newResourceFromPool\":\"\",\"_createGroup\":\"\",\"_groupExists\":\"\",\"addResources\":\"\",\"loadNextResource\":\"\",\"loadResources\":\"\",\"getCanvasFromImage\":\"\",\"loadImage\":\"\",\"createObjectPool\":\"\",\"registerScript\":\"\",\"loadScript\":\"\",\"loadAudio\":\"\",\"loadWadAudio\":\"\",\"loadJSON\":\"\",\"loadMapData\":\"\",\"_resLoaded\":\"\",\"_loadResource\":\"\"}"
      }
    },
    "description": "Handles resource loading at runtime\n\nResources are loaded and retrieved using this manager.\n\nThe ResourceManager can load at runtime the following types of resources:\n - Images\n - Sounds\n - Maps (JSON-based)",
    "name": "ResourceManager",
    "longname": "ResourceManager",
    "kind": "constant",
    "scope": "global",
    "params": [],
    "$longname": "ResourceManager",
    "$members": [
      {
        "comment": "/**\n     * Add new resource(s) into the specified group\n     *\n     * @param {Object|Array} resource a single or a group of resources to load\n     * @param {String} [group='any'] the name of the group to add the resources into\n     *\n     * @returns {Deferred} a new Deferred that will be resolved once the\n     * resources have been loaded.\n     *\n     * *Note* This method only adds the resources to the group\n     * but do not load them.\n     *\n     * @example\n     *\n     * ResourceManager.addResources({\n     *  id: 'sprites',\n     *  type: 'image',\n     *  src: './sprites/gem.png'\n     * }, \"sprites\");\n     *\n     * // resource type can be image|map|audio\n     */",
        "meta": {
          "range": [
            5547,
            6862
          ],
          "filename": "ResourceManager.js",
          "lineno": 167,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000295",
            "name": "addResources",
            "type": "FunctionExpression"
          },
          "vars": {
            "group": "ResourceManager.addResources~group",
            "i": "ResourceManager.addResources~i",
            "resGroup": "ResourceManager.addResources~resGroup",
            "resGroup.res[undefined]": "ResourceManager.addResources~resGroup.res[undefined]"
          }
        },
        "description": "Add new resource(s) into the specified group",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "Array"
              ]
            },
            "description": "a single or a group of resources to load",
            "name": "resource"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "'any'",
            "description": "the name of the group to add the resources into",
            "name": "group"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a new Deferred that will be resolved once the\nresources have been loaded.\n\n*Note* This method only adds the resources to the group\nbut do not load them."
          }
        ],
        "examples": [
          "ResourceManager.addResources({\n id: 'sprites',\n type: 'image',\n src: './sprites/gem.png'\n}, \"sprites\");\n\n// resource type can be image|map|audio"
        ],
        "name": "addResources",
        "longname": "ResourceManager.addResources",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.addResources"
      },
      {
        "comment": "/**\n     * Creates a pool for a specified object\n     *\n     * This method pre-allocates objects for later use.\n     *\n     * @param {Function} Obj a new object to create\n     * @param {Number} size the size of the pool\n     *\n     */",
        "meta": {
          "range": [
            12483,
            12561
          ],
          "filename": "ResourceManager.js",
          "lineno": 356,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000936",
            "name": "createObjectPool",
            "type": "FunctionExpression"
          }
        },
        "description": "Creates a pool for a specified object\n\nThis method pre-allocates objects for later use.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "a new object to create",
            "name": "Obj"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "the size of the pool",
            "name": "size"
          }
        ],
        "name": "createObjectPool",
        "longname": "ResourceManager.createObjectPool",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.createObjectPool"
      },
      {
        "comment": "/**\n     * Retrieve a resource using its id with optionnal group\n     *\n     * @param {String} id The id of the resource to get\n     * @param {String} [group=\"any\"] the group to get the resource from\n     * @param {Boolean} [fullObject=false] returns the resource object if true. Otherwise return the resource only.\n     */",
        "meta": {
          "range": [
            2014,
            2766
          ],
          "filename": "ResourceManager.js",
          "lineno": 62,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000113",
            "name": "getResourceById",
            "type": "FunctionExpression"
          },
          "vars": {
            "rsGroup": "ResourceManager.getResourceById~rsGroup",
            "rs": "ResourceManager.getResourceById~rs"
          }
        },
        "description": "Retrieve a resource using its id with optionnal group",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the resource to get",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "defaultvalue": "\"any\"",
            "description": "the group to get the resource from",
            "name": "group"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "returns the resource object if true. Otherwise return the resource only.",
            "name": "fullObject"
          }
        ],
        "name": "getResourceById",
        "longname": "ResourceManager.getResourceById",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.getResourceById"
      },
      {
        "comment": "/**\n     * Loads a new Audio file using standard HTML5 Audio\n     *\n     * @param {Object} res a descriptor for the sound to load\n     * @param {String} gpName the name of the group to load the audio file from\n     *\n     * @returns {Deferred} a new promise that will be resolved once the file has been loaded\n     */",
        "meta": {
          "range": [
            15670,
            16648
          ],
          "filename": "ResourceManager.js",
          "lineno": 447,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100001022",
            "name": "loadAudio",
            "type": "FunctionExpression"
          },
          "vars": {
            "that": "ResourceManager.loadAudio~that",
            "audio": "ResourceManager.loadAudio~audio",
            "def": "ResourceManager.loadAudio~def",
            "onLoad": "ResourceManager.loadAudio~onLoad",
            "audio.preload": "ResourceManager.loadAudio~audio.preload",
            "": null,
            "audio.src": "ResourceManager.loadAudio~audio.src"
          }
        },
        "description": "Loads a new Audio file using standard HTML5 Audio",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "a descriptor for the sound to load",
            "name": "res"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "the name of the group to load the audio file from",
            "name": "gpName"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a new promise that will be resolved once the file has been loaded"
          }
        ],
        "name": "loadAudio",
        "longname": "ResourceManager.loadAudio",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadAudio"
      },
      {
        "comment": "/**\n     * starts loading an image\n     *\n     * @param {Object} res an Object describing the resource to load\n     * @param {String} [gpName=undefined] the name of the group that the resource came from, set to undefined to load a single resource\n     *\n     * @returns {Deferred} a new promise that will be resolved when the file has been loaded.\n     */",
        "meta": {
          "range": [
            11257,
            12238
          ],
          "filename": "ResourceManager.js",
          "lineno": 319,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000852",
            "name": "loadImage",
            "type": "FunctionExpression"
          },
          "vars": {
            "img": "ResourceManager.loadImage~img",
            "that": "ResourceManager.loadImage~that",
            "def": "ResourceManager.loadImage~def",
            "img.onload": "ResourceManager.loadImage~img.onload",
            "": null,
            "img.src": "ResourceManager.loadImage~img.src"
          }
        },
        "description": "starts loading an image",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "an Object describing the resource to load",
            "name": "res"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "optional": true,
            "description": "the name of the group that the resource came from, set to undefined to load a single resource",
            "name": "gpName"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a new promise that will be resolved when the file has been loaded."
          }
        ],
        "name": "loadImage",
        "longname": "ResourceManager.loadImage",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadImage"
      },
      {
        "comment": "/**\n     * Loads a JSON file\n     *\n     * @param {Object} res The JSON file descriptor\n     * @param {String} gpName The name of the group to load the file from\n     * @param {Function} callback An optionnal callback to execute once the file has been loaded\n     *\n     * @returns {Deferred} a promise that will be resolved once the file has been loaded.\n     */",
        "meta": {
          "range": [
            17793,
            18588
          ],
          "filename": "ResourceManager.js",
          "lineno": 511,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100001183",
            "name": "loadJSON",
            "type": "FunctionExpression"
          },
          "vars": {
            "def": "ResourceManager.loadJSON~def",
            "": null
          }
        },
        "description": "Loads a JSON file",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The JSON file descriptor",
            "name": "res"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the group to load the file from",
            "name": "gpName"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "An optionnal callback to execute once the file has been loaded",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a promise that will be resolved once the file has been loaded."
          }
        ],
        "name": "loadJSON",
        "longname": "ResourceManager.loadJSON",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadJSON"
      },
      {
        "comment": "/**\n     * Attempts to load the next resource in the specified group\n     *\n     * @param {String} groupName the name of the group to use.\n     */",
        "meta": {
          "range": [
            7019,
            7363
          ],
          "filename": "ResourceManager.js",
          "lineno": 203,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000474",
            "name": "loadNextResource",
            "type": "FunctionExpression"
          },
          "vars": {
            "group": "ResourceManager.loadNextResource~group",
            "i": "ResourceManager.loadNextResource~i"
          }
        },
        "description": "Attempts to load the next resource in the specified group",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "the name of the group to use.",
            "name": "groupName"
          }
        ],
        "name": "loadNextResource",
        "longname": "ResourceManager.loadNextResource",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadNextResource"
      },
      {
        "comment": "/**\n     * Loads all resources found in the specified group, optionnaly\n     * calling a callback after each file has been loaded.\n     *\n     * @param {String} group The name of the group to load.\n     * @param {Function} [progressCb=undefined] an optionnal progress callback.\n     * @param {Function} [errorCb=undefined] an optionnal error callback.\n     *\n     */",
        "meta": {
          "range": [
            7809,
            10400
          ],
          "filename": "ResourceManager.js",
          "lineno": 224,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000533",
            "name": "loadResources",
            "type": "FunctionExpression"
          },
          "vars": {
            "group": "ResourceManager.loadResources~group",
            "this.loading": "ResourceManager.loadResources#loading",
            "resGroup": "ResourceManager.loadResources~resGroup",
            "nextRes": "ResourceManager.loadResources~nextRes",
            "i": "ResourceManager.loadResources~i",
            "size": "ResourceManager.loadResources~size",
            "resGroup.progressCb": "ResourceManager.loadResources~resGroup.progressCb",
            "resGroup.errorCb": "ResourceManager.loadResources~resGroup.errorCb",
            "resGroup.gpTimeout": "ResourceManager.loadResources~resGroup.gpTimeout",
            "": null
          }
        },
        "description": "Loads all resources found in the specified group, optionnaly\ncalling a callback after each file has been loaded.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the group to load.",
            "name": "group"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "an optionnal progress callback.",
            "name": "progressCb"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "an optionnal error callback.",
            "name": "errorCb"
          }
        ],
        "name": "loadResources",
        "longname": "ResourceManager.loadResources",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadResources"
      },
      {
        "comment": "/**\n     * Loads a new Audio file using the WAD library\n     *\n     * @param {Object} res a descriptor for the sound to load\n     * @param {String} gpName the name of the group to load the audio file from\n     *\n     * @returns {Deferred} a new promise that will be resolved once the file has been loaded\n     */",
        "meta": {
          "range": [
            16972,
            17418
          ],
          "filename": "ResourceManager.js",
          "lineno": 486,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100001124",
            "name": "loadWadAudio",
            "type": "FunctionExpression"
          },
          "vars": {
            "def": "ResourceManager.loadWadAudio~def",
            "sound": "ResourceManager.loadWadAudio~sound",
            "": null
          }
        },
        "description": "Loads a new Audio file using the WAD library",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "a descriptor for the sound to load",
            "name": "res"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "the name of the group to load the audio file from",
            "name": "gpName"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Deferred"
              ]
            },
            "description": "a new promise that will be resolved once the file has been loaded"
          }
        ],
        "name": "loadWadAudio",
        "longname": "ResourceManager.loadWadAudio",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.loadWadAudio"
      },
      {
        "comment": "/**\n     * Allocates a new resource from the pool\n     *\n     * This method creates a new instance of the JavaScript object, retrieving it from\n     * the pool if the object supports it. If it does not it simply uses new to generate a new instance\n     *\n     * @param {String} id The id of the resource for which to create a new instance.\n     *\n     * @returns {Object} a new instance of the specified object.\n     */",
        "meta": {
          "range": [
            3196,
            3716
          ],
          "filename": "ResourceManager.js",
          "lineno": 95,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000177",
            "name": "newResourceFromPool",
            "type": "FunctionExpression"
          },
          "vars": {
            "resource": "ResourceManager.newResourceFromPool~resource"
          }
        },
        "description": "Allocates a new resource from the pool\n\nThis method creates a new instance of the JavaScript object, retrieving it from\nthe pool if the object supports it. If it does not it simply uses new to generate a new instance",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The id of the resource for which to create a new instance.",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "a new instance of the specified object."
          }
        ],
        "name": "newResourceFromPool",
        "longname": "ResourceManager.newResourceFromPool",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.newResourceFromPool"
      },
      {
        "comment": "/**\n     * Register a script as resource: this allows to retrieve it using the resourceManager\n     * at runtime.\n     *\n     * `notes`\n     * During athenajs development, systemjs loader was used instead of Webpack\n     * systemjs allows to load any script during *runtime*\n     *\n     * This allowed to load script (sprite) resources at runtime, on-demand.\n     *\n     * Unfortunately, this is not possible at all with ES6/Webpack which needs to\n     * know during build-process which scripts will be needed at runtime to build\n     * dependency graphs.\n     *\n     */",
        "meta": {
          "range": [
            13142,
            13508
          ],
          "filename": "ResourceManager.js",
          "lineno": 374,
          "columnno": 4,
          "path": "e:\\Docs\\Dev\\athenajs\\js\\Resource",
          "code": {
            "id": "astnode100000948",
            "name": "registerScript",
            "type": "FunctionExpression"
          },
          "vars": {
            "existing": "ResourceManager.registerScript~existing",
            "this.dynamicScripts[undefined]": "ResourceManager.registerScript#dynamicScripts[undefined]"
          }
        },
        "description": "Register a script as resource: this allows to retrieve it using the resourceManager\nat runtime.\n\n`notes`\nDuring athenajs development, systemjs loader was used instead of Webpack\nsystemjs allows to load any script during *runtime*\n\nThis allowed to load script (sprite) resources at runtime, on-demand.\n\nUnfortunately, this is not possible at all with ES6/Webpack which needs to\nknow during build-process which scripts will be needed at runtime to build\ndependency graphs.",
        "name": "registerScript",
        "longname": "ResourceManager.registerScript",
        "kind": "function",
        "memberof": "ResourceManager",
        "scope": "static",
        "$longname": "ResourceManager.registerScript"
      }
    ]
  }
]