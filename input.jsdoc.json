[
  {
    "comment": "/**\n * Handles keyboard input (joystick input doesn't work correctly yet).\n *\n * Key presses are stored in a simple hash this.keyPressed with keyCode as key, and attached handlers are stored in\n * another hash this.keyCb.\n *\n * The InputManager can also be used to record keystrokes which can then be played back to produce game demos for example.\n *\n * @example\n *\n * // example state of InputManager.keyPressed where `up` key is down and `down` key has just been released:\n * { 32: true, 40: false}\n *\n */",
    "meta": {
      "range": [
        617,
        19796
      ],
      "filename": "InputManager.js",
      "lineno": 19,
      "columnno": 6,
      "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
      "code": {
        "id": "astnode100000003",
        "name": "InputManager",
        "type": "ObjectExpression",
        "value": "{\"KEYS\":\"\",\"PAD_BUTTONS\":\"\",\"axes\":\"\",\"newGamepadPollDelay\":1000,\"gamepadSupport\":false,\"recording\":false,\"playingEvents\":false,\"playingPos\":0,\"recordedEvents\":\"\",\"pad\":null,\"latches\":\"\",\"keyPressed\":\"\",\"padPressed\":\"\",\"keyCb\":\"\",\"enabled\":true,\"inputMode\":\"keyboard\",\"dPadJoystick\":null,\"jPollInterval\":0,\"init\":\"\",\"_generateKeyCodes\":\"\",\"_installInputModeSwitchHandler\":\"\",\"startRecordingEvents\":\"\",\"stopRecordingEvents\":\"\",\"playRecordedEvents\":\"\",\"nextRecordedEvents\":\"\",\"recordEvents\":\"\",\"setInputMode\":\"\",\"_resetKeys\":\"\",\"_pollNewGamepad\":\"\",\"_pollGamepad\":\"\",\"_getModifiers\":\"\",\"_initVirtualJoystick\":\"\",\"_clearJoystickPoll\":\"\",\"_pollJoystick\":\"\",\"_installKBEventHandlers\":\"\",\"getAllKeysStatus\":\"\",\"getKeyStatus\":\"\",\"isKeyDown\":\"\",\"installKeyCallback\":\"\",\"removeKeyCallback\":\"\",\"clearEvents\":\"\"}"
      }
    },
    "description": "Handles keyboard input (joystick input doesn't work correctly yet).\n\nKey presses are stored in a simple hash this.keyPressed with keyCode as key, and attached handlers are stored in\nanother hash this.keyCb.\n\nThe InputManager can also be used to record keystrokes which can then be played back to produce game demos for example.",
    "examples": [
      "// example state of InputManager.keyPressed where `up` key is down and `down` key has just been released:\n{ 32: true, 40: false}"
    ],
    "name": "InputManager",
    "longname": "InputManager",
    "kind": "constant",
    "scope": "global",
    "params": [],
    "$longname": "InputManager",
    "$members": [
      {
        "comment": "/**\n     * Returns an object with the state of all keys\n     */",
        "meta": {
          "range": [
            17990,
            18238
          ],
          "filename": "InputManager.js",
          "lineno": 537,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100001591",
            "name": "getAllKeysStatus",
            "type": "FunctionExpression"
          },
          "vars": {
            "keys": "InputManager.getAllKeysStatus~keys",
            "result": "InputManager.getAllKeysStatus~result",
            "i": "InputManager.getAllKeysStatus~i",
            "result[undefined]": "InputManager.getAllKeysStatus~result.undefined]"
          }
        },
        "description": "Returns an object with the state of all keys",
        "name": "getAllKeysStatus",
        "longname": "InputManager.getAllKeysStatus",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.getAllKeysStatus"
      },
      {
        "comment": "/**\n     * Initializes the InputManager with a reference to the game.\n     *\n     * This method prepares the InputManager by reseting keyboard states/handlers and\n     * set current inputMode\n     *\n     * @param {Object} options List of input options, unused for now\n     *\n     */",
        "meta": {
          "range": [
            2303,
            2580
          ],
          "filename": "InputManager.js",
          "lineno": 83,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000090",
            "name": "init",
            "type": "FunctionExpression"
          }
        },
        "description": "Initializes the InputManager with a reference to the game.\n\nThis method prepares the InputManager by reseting keyboard states/handlers and\nset current inputMode",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "List of input options, unused for now",
            "name": "options"
          }
        ],
        "name": "init",
        "longname": "InputManager.init",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.init"
      },
      {
        "comment": "/**\n     * Install callback that gets called when a key is pressed/released\n     *\n     * @param {String} key space-separated list of keys to listen for\n     * @param {String} event to listen for: can be `up` or `down`\n     * @param {Function} callback the function to call\n     */",
        "meta": {
          "range": [
            19102,
            19482
          ],
          "filename": "InputManager.js",
          "lineno": 579,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100001715",
            "name": "installKeyCallback",
            "type": "FunctionExpression"
          },
          "vars": {
            "": null
          }
        },
        "description": "Install callback that gets called when a key is pressed/released",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "space-separated list of keys to listen for",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "to listen for: can be `up` or `down`",
            "name": "event"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "the function to call",
            "name": "callback"
          }
        ],
        "name": "installKeyCallback",
        "longname": "InputManager.installKeyCallback",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.installKeyCallback"
      },
      {
        "comment": "/**\n     * A list of common keyCodes\n     */",
        "meta": {
          "range": [
            687,
            862
          ],
          "filename": "InputManager.js",
          "lineno": 23,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000006",
            "name": "KEYS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":17}"
          }
        },
        "description": "A list of common keyCodes",
        "name": "KEYS",
        "longname": "InputManager.KEYS",
        "kind": "member",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.KEYS"
      },
      {
        "comment": "/**\n     * Sets next key states using recorded events\n     *\n     * TODO: add an optional callback to be called at the end of the playback\n     * so that demo can be looped.\n     */",
        "meta": {
          "range": [
            5075,
            6044
          ],
          "filename": "InputManager.js",
          "lineno": 161,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000241",
            "name": "nextRecordedEvents",
            "type": "FunctionExpression"
          },
          "vars": {
            "this.playingEvents": "InputManager.nextRecordedEvents#playingEvents",
            "this.keyPressed": "InputManager.nextRecordedEvents#keyPressed"
          }
        },
        "description": "Sets next key states using recorded events\n\nTODO: add an optional callback to be called at the end of the playback\nso that demo can be looped.",
        "name": "nextRecordedEvents",
        "longname": "InputManager.nextRecordedEvents",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.nextRecordedEvents"
      },
      {
        "comment": "/**\n     * List of common pad buttons\n     */",
        "meta": {
          "range": [
            918,
            1437
          ],
          "filename": "InputManager.js",
          "lineno": 36,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000024",
            "name": "PAD_BUTTONS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":15,\"FACE_0\":1,\"FACE_3\":2,\"FACE_4\":3,\"LEFT_SHOULDER\":4,\"RIGHT_SHOULDER\":5,\"LEFT_SHOULDER_BOTTOM\":6,\"RIGHT_SHOULDER_BOTTOM\":7,\"SELECT\":8,\"START\":9,\"LEFT_ANALOGUE_STICK\":10,\"RIGHT_ANALOGUE_STICK\":11}"
          }
        },
        "description": "List of common pad buttons",
        "name": "PAD_BUTTONS",
        "longname": "InputManager.PAD_BUTTONS",
        "kind": "member",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.PAD_BUTTONS"
      },
      {
        "comment": "/**\n     * After events have been reccorded they can be played back using this method.\n     */",
        "meta": {
          "range": [
            4634,
            4883
          ],
          "filename": "InputManager.js",
          "lineno": 148,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000214",
            "name": "playRecordedEvents",
            "type": "FunctionExpression"
          },
          "vars": {
            "this.playingEvents": "InputManager.playRecordedEvents#playingEvents",
            "this.playPos": "InputManager.playRecordedEvents#playPos"
          }
        },
        "description": "After events have been reccorded they can be played back using this method.",
        "name": "playRecordedEvents",
        "longname": "InputManager.playRecordedEvents",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.playRecordedEvents"
      },
      {
        "comment": "/**\n     * Changes input mode\n     *\n     * @param {String} mode Changes current input mode, can be `virtual_joystick`, `keyboard`, `gamepad`\n     */",
        "meta": {
          "range": [
            6686,
            7547
          ],
          "filename": "InputManager.js",
          "lineno": 208,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000324",
            "name": "setInputMode",
            "type": "FunctionExpression"
          },
          "vars": {
            "this.jPollInterval": "InputManager.setInputMode#jPollInterval",
            "this.inputMode": "InputManager.setInputMode#inputMode"
          }
        },
        "description": "Changes input mode",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Changes current input mode, can be `virtual_joystick`, `keyboard`, `gamepad`",
            "name": "mode"
          }
        ],
        "name": "setInputMode",
        "longname": "InputManager.setInputMode",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.setInputMode"
      },
      {
        "comment": "/**\n     * Starts recording input events. They are stored into `InputManager.recordedEvents`\n     */",
        "meta": {
          "range": [
            4049,
            4286
          ],
          "filename": "InputManager.js",
          "lineno": 131,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000164",
            "name": "startRecordingEvents",
            "type": "FunctionExpression"
          },
          "vars": {
            "this.recordedEvents.length": "InputManager.startRecordingEvents#recordedEvents.length",
            "this.recording": "InputManager.startRecordingEvents#recording"
          }
        },
        "description": "Starts recording input events. They are stored into `InputManager.recordedEvents`",
        "name": "startRecordingEvents",
        "longname": "InputManager.startRecordingEvents",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.startRecordingEvents"
      },
      {
        "comment": "/**\n     * Stops recording events.\n     */",
        "meta": {
          "range": [
            4339,
            4529
          ],
          "filename": "InputManager.js",
          "lineno": 141,
          "columnno": 4,
          "path": "E:\\Docs\\Dev\\athenajs\\js\\Input",
          "code": {
            "id": "astnode100000193",
            "name": "stopRecordingEvents",
            "type": "FunctionExpression"
          },
          "vars": {
            "this.recording": "InputManager.stopRecordingEvents#recording"
          }
        },
        "description": "Stops recording events.",
        "name": "stopRecordingEvents",
        "longname": "InputManager.stopRecordingEvents",
        "kind": "function",
        "memberof": "InputManager",
        "scope": "static",
        "$longname": "InputManager.stopRecordingEvents"
      }
    ]
  }
]